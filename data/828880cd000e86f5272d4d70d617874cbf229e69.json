{
  "fileId": "828880cd000e86f5272d4d70d617874cbf229e69",
  "fileName": "login.spec.js",
  "tests": [
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-ef22888abdd50efb3973a72a8c97e417cef37057",
      "title": "should be at the login url",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1177,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1177,
          "startTime": "2021-10-22T01:40:21.211Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:40:21.212Z",
              "duration": 1041,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:40:21.217Z",
                  "duration": 36,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:40:21.254Z",
                  "duration": 999,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-22T01:40:22.254Z",
              "duration": 26,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:40:22.280Z",
              "duration": 108,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:40:22.378Z",
                  "duration": 10,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-405e2bbb49e635acc9db6b60d8b2b005c1f10ab2",
      "title": "should show accepted users",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1167,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1167,
          "startTime": "2021-10-22T01:40:22.390Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:40:22.390Z",
              "duration": 1039,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:40:22.395Z",
                  "duration": 43,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:40:22.438Z",
                  "duration": 991,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-10-22T01:40:23.430Z",
              "duration": 23,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-10-22T01:40:23.454Z",
              "duration": 0,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:40:23.455Z",
              "duration": 102,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:40:23.545Z",
                  "duration": 12,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-d8dab2e7caad71d6fe1a9470e29b7a77e0e8ffaa",
      "title": "should show application password ",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1176,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1176,
          "startTime": "2021-10-22T01:40:23.558Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:40:23.558Z",
              "duration": 1057,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:40:23.563Z",
                  "duration": 38,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:40:23.601Z",
                  "duration": 1014,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:40:24.616Z",
              "duration": 24,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:40:24.640Z",
              "duration": 94,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:40:24.726Z",
                  "duration": 7,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-8f7089443c527c6a0de17e8b399c420dfb5b482e",
      "title": "should show locked user error",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 1465,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1465,
          "startTime": "2021-10-22T01:40:24.734Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:40:24.734Z",
              "duration": 1089,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:40:24.741Z",
                  "duration": 38,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:40:24.780Z",
                  "duration": 1043,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-10-22T01:40:25.824Z",
              "duration": 97,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:40:25.922Z",
              "duration": 60,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:40:25.983Z",
              "duration": 59,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-22T01:40:26.043Z",
              "duration": 10,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:40:26.054Z",
              "duration": 12,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:40:26.066Z",
              "duration": 133,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:40:26.183Z",
                  "duration": 16,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-215a1e9cb271011fd3cc91896b3f5fdaa8ff218c",
      "title": "should show username is required error",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 1617,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1617,
          "startTime": "2021-10-22T01:40:26.200Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:40:26.200Z",
              "duration": 1164,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:40:26.209Z",
                  "duration": 55,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:40:26.265Z",
                  "duration": 1099,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-10-22T01:40:27.364Z",
              "duration": 68,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:40:27.433Z",
              "duration": 160,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:40:27.594Z",
              "duration": 55,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-22T01:40:27.650Z",
              "duration": 8,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:40:27.659Z",
              "duration": 11,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:40:27.670Z",
              "duration": 147,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:40:27.796Z",
                  "duration": 21,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-fb46c22e2b845ed63d73c8f8d7035fcb7e2e55e5",
      "title": "should show username and password doesn't match",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 1923,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1923,
          "startTime": "2021-10-22T01:40:26.997Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:40:26.998Z",
              "duration": 1563,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:40:27.236Z",
                  "duration": 60,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:40:27.298Z",
                  "duration": 1263,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-10-22T01:40:28.562Z",
              "duration": 81,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:40:28.644Z",
              "duration": 80,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:40:28.725Z",
              "duration": 49,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-22T01:40:28.774Z",
              "duration": 13,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:40:28.789Z",
              "duration": 17,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:40:28.806Z",
              "duration": 114,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:40:28.911Z",
                  "duration": 8,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-f2908767cc70b5dc762a4ca12728e0698d20641c",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2436,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2436,
          "startTime": "2021-10-22T01:40:28.921Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:40:28.922Z",
              "duration": 1156,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:40:28.928Z",
                  "duration": 39,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:40:28.967Z",
                  "duration": 1111,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-10-22T01:40:30.079Z",
              "duration": 100,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:40:30.179Z",
              "duration": 106,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:40:30.286Z",
              "duration": 195,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-22T01:40:30.481Z",
              "duration": 57,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:40:30.538Z",
              "duration": 819,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:40:31.348Z",
                  "duration": 8,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-d4a40aae9b95663fd5c88ef14677e8bb61c7bde8",
      "title": "should be at the login url",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1288,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1288,
          "startTime": "2021-10-22T01:42:08.266Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:42:08.266Z",
              "duration": 1065,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:42:08.271Z",
                  "duration": 41,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:42:08.318Z",
                  "duration": 1013,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-22T01:42:09.332Z",
              "duration": 26,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:42:09.358Z",
              "duration": 196,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:42:09.548Z",
                  "duration": 6,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-9c77119013e08e85d363416c4b1c050ec55e05a4",
      "title": "should show accepted users",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1365,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1365,
          "startTime": "2021-10-22T01:42:09.555Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:42:09.556Z",
              "duration": 1145,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:42:09.562Z",
                  "duration": 40,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:42:09.603Z",
                  "duration": 1098,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-10-22T01:42:10.702Z",
              "duration": 24,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-10-22T01:42:10.727Z",
              "duration": 0,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:42:10.728Z",
              "duration": 192,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:42:10.913Z",
                  "duration": 6,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-3bb7025f4b165cf17d7f9b94251db9877e9405fd",
      "title": "should show application password ",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1273,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1273,
          "startTime": "2021-10-22T01:42:10.920Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:42:10.921Z",
              "duration": 1058,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:42:10.927Z",
                  "duration": 38,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:42:10.966Z",
                  "duration": 1013,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:42:11.980Z",
              "duration": 24,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:42:12.004Z",
              "duration": 189,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:42:12.183Z",
                  "duration": 10,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-c1e4d61d3141458e677debff8bc4e0975afcb354",
      "title": "should show locked user error",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 1674,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1674,
          "startTime": "2021-10-22T01:42:12.194Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:42:12.194Z",
              "duration": 1024,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:42:12.199Z",
                  "duration": 40,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:42:12.239Z",
                  "duration": 979,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-10-22T01:42:13.219Z",
              "duration": 145,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:42:13.365Z",
              "duration": 74,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:42:13.440Z",
              "duration": 57,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-22T01:42:13.497Z",
              "duration": 22,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:42:13.519Z",
              "duration": 14,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:42:13.533Z",
              "duration": 335,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:42:13.849Z",
                  "duration": 16,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-8aa37dfeed724766eae4fd8967d88f51ddd4b55f",
      "title": "should show username is required error",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 2243,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2243,
          "startTime": "2021-10-22T01:42:13.528Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:42:13.528Z",
              "duration": 1706,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:42:13.833Z",
                  "duration": 133,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:42:13.970Z",
                  "duration": 1264,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-10-22T01:42:15.235Z",
              "duration": 36,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:42:15.272Z",
              "duration": 61,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:42:15.334Z",
              "duration": 72,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-22T01:42:15.407Z",
              "duration": 10,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:42:15.421Z",
              "duration": 18,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:42:15.440Z",
              "duration": 331,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:42:15.755Z",
                  "duration": 15,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-fc970eda40ffc9fa4945cec93d585ced539b72a2",
      "title": "should show username and password doesn't match",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 1554,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1554,
          "startTime": "2021-10-22T01:42:15.773Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:42:15.774Z",
              "duration": 1173,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:42:15.793Z",
                  "duration": 89,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:42:15.882Z",
                  "duration": 1065,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-10-22T01:42:16.948Z",
              "duration": 59,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:42:17.009Z",
              "duration": 54,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:42:17.064Z",
              "duration": 53,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-22T01:42:17.118Z",
              "duration": 9,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:42:17.129Z",
              "duration": 8,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:42:17.137Z",
              "duration": 190,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:42:17.320Z",
                  "duration": 7,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-69650c3afd3e98144a8bc477b940ace583638e80",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2182,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2182,
          "startTime": "2021-10-22T01:42:17.328Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:42:17.328Z",
              "duration": 1062,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:42:17.334Z",
                  "duration": 39,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:42:17.374Z",
                  "duration": 1015,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-10-22T01:42:18.391Z",
              "duration": 83,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:42:18.475Z",
              "duration": 54,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:42:18.529Z",
              "duration": 131,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-22T01:42:18.661Z",
              "duration": 66,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:42:18.727Z",
              "duration": 783,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:42:19.499Z",
                  "duration": 10,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-902990b201eaf9c0956f7da461961c8b52b50998",
      "title": "should be at the login url",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1164,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1164,
          "startTime": "2021-10-22T01:43:45.783Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:43:45.784Z",
              "duration": 1026,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:43:45.791Z",
                  "duration": 34,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:43:45.826Z",
                  "duration": 984,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-22T01:43:46.811Z",
              "duration": 25,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:43:46.836Z",
              "duration": 111,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:43:46.940Z",
                  "duration": 7,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-5a40f2b07ad4bec508c011653ed48b8b08184d57",
      "title": "should show accepted users",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1167,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1167,
          "startTime": "2021-10-22T01:43:46.948Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:43:46.948Z",
              "duration": 1017,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:43:46.954Z",
                  "duration": 33,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:43:46.988Z",
                  "duration": 977,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-10-22T01:43:47.966Z",
              "duration": 23,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-10-22T01:43:47.990Z",
              "duration": 1,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:43:47.991Z",
              "duration": 124,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:43:48.104Z",
                  "duration": 11,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-b5d0baca6632d947484cb0f06b435c86fffa9783",
      "title": "should show application password ",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1148,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1148,
          "startTime": "2021-10-22T01:43:48.115Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:43:48.116Z",
              "duration": 1021,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:43:48.125Z",
                  "duration": 36,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:43:48.162Z",
                  "duration": 975,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:43:49.138Z",
              "duration": 22,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:43:49.160Z",
              "duration": 103,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:43:49.253Z",
                  "duration": 8,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-b27e60e291baa2766110fa88f6b576fd09d005f9",
      "title": "should show locked user error",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 1380,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1380,
          "startTime": "2021-10-22T01:43:49.264Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:43:49.264Z",
              "duration": 1025,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:43:49.270Z",
                  "duration": 33,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:43:49.303Z",
                  "duration": 986,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-10-22T01:43:50.290Z",
              "duration": 84,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:43:50.375Z",
              "duration": 57,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:43:50.432Z",
              "duration": 79,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-22T01:43:50.511Z",
              "duration": 16,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:43:50.528Z",
              "duration": 7,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:43:50.535Z",
              "duration": 109,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:43:50.637Z",
                  "duration": 5,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-165c1b436a7f47ac5fa7c09c90f01541b52ae81f",
      "title": "should show username is required error",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 1459,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1459,
          "startTime": "2021-10-22T01:43:50.645Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:43:50.645Z",
              "duration": 1096,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:43:50.651Z",
                  "duration": 32,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:43:50.683Z",
                  "duration": 1058,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-10-22T01:43:51.742Z",
              "duration": 38,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:43:51.781Z",
              "duration": 89,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:43:51.870Z",
              "duration": 49,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-22T01:43:51.919Z",
              "duration": 19,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:43:51.939Z",
              "duration": 17,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:43:51.956Z",
              "duration": 148,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:43:52.093Z",
                  "duration": 10,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-92bd631756721d575633888b13e68f7d24715ed2",
      "title": "should show username and password doesn't match",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 1743,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1743,
          "startTime": "2021-10-22T01:43:51.608Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:43:51.608Z",
              "duration": 1425,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:43:51.725Z",
                  "duration": 45,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:43:51.777Z",
                  "duration": 1256,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-10-22T01:43:53.034Z",
              "duration": 62,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:43:53.097Z",
              "duration": 52,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:43:53.150Z",
              "duration": 65,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-22T01:43:53.216Z",
              "duration": 10,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:43:53.228Z",
              "duration": 17,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:43:53.245Z",
              "duration": 106,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:43:53.343Z",
                  "duration": 7,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-a821bd2e7f071e153a367200b5602cdc39f953ab",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2373,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2373,
          "startTime": "2021-10-22T01:43:53.352Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:43:53.353Z",
              "duration": 1307,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:43:53.358Z",
                  "duration": 38,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:43:53.396Z",
                  "duration": 1264,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-10-22T01:43:54.661Z",
              "duration": 73,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:43:54.735Z",
              "duration": 54,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:43:54.790Z",
              "duration": 156,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-22T01:43:54.947Z",
              "duration": 41,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:43:54.989Z",
              "duration": 736,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:43:55.716Z",
                  "duration": 8,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-64ccd2abeb66bd09488581d21ba08ee6e66bb9ff",
      "title": "should be at the login url",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1507,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1507,
          "startTime": "2021-10-22T01:45:59.420Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:45:59.421Z",
              "duration": 1385,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:45:59.439Z",
                  "duration": 229,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:45:59.669Z",
                  "duration": 1137,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-22T01:46:00.807Z",
              "duration": 37,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:46:00.844Z",
              "duration": 83,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:46:00.912Z",
                  "duration": 15,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-e8f2af6a57b040b5c2ed8dbd17619e49f1874686",
      "title": "should show accepted users",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1581,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1581,
          "startTime": "2021-10-22T01:46:00.928Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:46:00.928Z",
              "duration": 1451,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:46:00.948Z",
                  "duration": 234,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:46:01.183Z",
                  "duration": 1196,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-10-22T01:46:02.380Z",
              "duration": 40,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-10-22T01:46:02.421Z",
              "duration": 1,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:46:02.422Z",
              "duration": 87,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:46:02.499Z",
                  "duration": 9,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-6d79ee52f5e52d37b2bba06c96f0c3f60050387e",
      "title": "should show application password ",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1907,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1907,
          "startTime": "2021-10-22T01:46:02.509Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:46:02.510Z",
              "duration": 1687,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:46:02.540Z",
                  "duration": 333,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:46:02.873Z",
                  "duration": 1324,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:46:04.198Z",
              "duration": 88,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:46:04.286Z",
              "duration": 130,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:46:04.405Z",
                  "duration": 11,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-87b33f996b98dd8f69efc7fbd60970a5044162d7",
      "title": "should show locked user error",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 4825,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 4825,
          "startTime": "2021-10-22T01:46:04.053Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:46:04.054Z",
              "duration": 4119,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:46:05.929Z",
                  "duration": 989,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:46:06.920Z",
                  "duration": 1252,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-10-22T01:46:08.174Z",
              "duration": 325,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:46:08.499Z",
              "duration": 119,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:46:08.620Z",
              "duration": 102,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-22T01:46:08.723Z",
              "duration": 25,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:46:08.750Z",
              "duration": 35,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:46:08.785Z",
              "duration": 93,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:46:08.857Z",
                  "duration": 20,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-7d8442de6d8e0d0a6d6b8066409f6b3df9674c5d",
      "title": "should show username is required error",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 1901,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1901,
          "startTime": "2021-10-22T01:46:08.879Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:46:08.879Z",
              "duration": 1488,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:46:08.903Z",
                  "duration": 264,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:46:09.167Z",
                  "duration": 1200,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-10-22T01:46:10.368Z",
              "duration": 46,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:46:10.415Z",
              "duration": 143,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:46:10.559Z",
              "duration": 90,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-22T01:46:10.650Z",
              "duration": 20,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:46:10.670Z",
              "duration": 27,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:46:10.698Z",
              "duration": 82,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:46:10.768Z",
                  "duration": 12,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-1026593a957da30075efc811c273142269eba20c",
      "title": "should show username and password doesn't match",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 1975,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1975,
          "startTime": "2021-10-22T01:46:10.781Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:46:10.781Z",
              "duration": 1531,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:46:10.799Z",
                  "duration": 312,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:46:11.112Z",
                  "duration": 1200,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-10-22T01:46:12.313Z",
              "duration": 125,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:46:12.438Z",
              "duration": 110,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:46:12.548Z",
              "duration": 87,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-22T01:46:12.635Z",
              "duration": 22,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:46:12.658Z",
              "duration": 27,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:46:12.685Z",
              "duration": 71,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:46:12.746Z",
                  "duration": 9,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-f214f86175adfcf14e0c7cbd762502df0f38c2bd",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 3141,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 3141,
          "startTime": "2021-10-22T01:46:12.757Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:46:12.757Z",
              "duration": 1819,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:46:12.780Z",
                  "duration": 325,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:46:13.105Z",
                  "duration": 1471,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-10-22T01:46:14.577Z",
              "duration": 256,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:46:14.834Z",
              "duration": 144,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:46:14.978Z",
              "duration": 218,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-22T01:46:15.197Z",
              "duration": 111,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:46:15.308Z",
              "duration": 590,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:46:15.878Z",
                  "duration": 19,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-8d02882f9444a7d58c923750a3a161f4b3231528",
      "title": "should be at the login url",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1449,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1449,
          "startTime": "2021-10-22T01:48:06.527Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:48:06.527Z",
              "duration": 1360,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:48:06.557Z",
                  "duration": 244,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:48:06.802Z",
                  "duration": 1084,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-22T01:48:07.887Z",
              "duration": 31,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:48:07.918Z",
              "duration": 58,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:48:07.974Z",
                  "duration": 2,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-1db7d1ba52f9caace3a98e4ddcadd4ad67fba2e5",
      "title": "should show accepted users",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1386,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1386,
          "startTime": "2021-10-22T01:48:07.977Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:48:07.977Z",
              "duration": 1299,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:48:07.993Z",
                  "duration": 187,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:48:08.180Z",
                  "duration": 1096,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-10-22T01:48:09.276Z",
              "duration": 32,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-10-22T01:48:09.308Z",
              "duration": 1,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:48:09.309Z",
              "duration": 54,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:48:09.360Z",
                  "duration": 3,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-c56eb469bcc3a498408fb606e977c6fb27bf76ee",
      "title": "should show application password ",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1672,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1672,
          "startTime": "2021-10-22T01:48:09.364Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:48:09.364Z",
              "duration": 1582,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:48:09.380Z",
                  "duration": 262,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:48:09.643Z",
                  "duration": 1302,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:48:10.946Z",
              "duration": 34,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:48:10.981Z",
              "duration": 55,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:48:11.032Z",
                  "duration": 4,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-31ae6a3ba511899157690ffb0133d6273d3435c0",
      "title": "should show locked user error",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 2462,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2462,
          "startTime": "2021-10-22T01:48:11.037Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:48:11.037Z",
              "duration": 1488,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:48:11.052Z",
                  "duration": 223,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:48:11.276Z",
                  "duration": 1249,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-10-22T01:48:12.526Z",
              "duration": 477,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:48:13.004Z",
              "duration": 235,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:48:13.239Z",
              "duration": 96,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-22T01:48:13.341Z",
              "duration": 56,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:48:13.398Z",
              "duration": 29,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:48:13.427Z",
              "duration": 71,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:48:13.495Z",
                  "duration": 3,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-68ed1c7975f8e9628d87cdd0b45503d97dcf6c5c",
      "title": "should show username is required error",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 2858,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2858,
          "startTime": "2021-10-22T01:48:12.419Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:48:12.420Z",
              "duration": 2230,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:48:12.944Z",
                  "duration": 389,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:48:13.337Z",
                  "duration": 1313,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-10-22T01:48:14.652Z",
              "duration": 60,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:48:14.713Z",
              "duration": 357,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:48:15.071Z",
              "duration": 78,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-22T01:48:15.150Z",
              "duration": 31,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:48:15.185Z",
              "duration": 21,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:48:15.207Z",
              "duration": 70,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:48:15.272Z",
                  "duration": 4,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-25d3fe9f6a8f27def8257f5e7ce7afdb4982e603",
      "title": "should show username and password doesn't match",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 2083,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2083,
          "startTime": "2021-10-22T01:48:15.278Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:48:15.279Z",
              "duration": 1668,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:48:15.304Z",
                  "duration": 270,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:48:15.574Z",
                  "duration": 1373,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-10-22T01:48:16.948Z",
              "duration": 122,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:48:17.070Z",
              "duration": 127,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:48:17.197Z",
              "duration": 70,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-22T01:48:17.267Z",
              "duration": 18,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:48:17.286Z",
              "duration": 17,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:48:17.303Z",
              "duration": 58,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:48:17.358Z",
                  "duration": 3,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-a94233a7b41c4d8fec1b2944b45d03a211ba00bf",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2579,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2579,
          "startTime": "2021-10-22T01:48:17.362Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:48:17.362Z",
              "duration": 1318,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:48:17.373Z",
                  "duration": 177,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:48:17.550Z",
                  "duration": 1130,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-10-22T01:48:18.681Z",
              "duration": 380,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:48:19.062Z",
              "duration": 227,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:48:19.290Z",
              "duration": 167,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-22T01:48:19.458Z",
              "duration": 308,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:48:19.766Z",
              "duration": 175,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:48:19.937Z",
                  "duration": 3,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-29327056d262cf56f1c9b5467f1ffb2d07166160",
      "title": "should be at the login url",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1535,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1535,
          "startTime": "2021-10-22T01:50:10.209Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:50:10.209Z",
              "duration": 1431,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:50:10.229Z",
                  "duration": 278,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:50:10.508Z",
                  "duration": 1132,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-22T01:50:11.641Z",
              "duration": 32,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:50:11.673Z",
              "duration": 71,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:50:11.741Z",
                  "duration": 2,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-dc202057ecd485193475a8424604f8b8eb702beb",
      "title": "should show accepted users",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1518,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1518,
          "startTime": "2021-10-22T01:50:11.744Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:50:11.745Z",
              "duration": 1393,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:50:11.762Z",
                  "duration": 256,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:50:12.019Z",
                  "duration": 1119,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-10-22T01:50:13.139Z",
              "duration": 43,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-10-22T01:50:13.182Z",
              "duration": 2,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:50:13.184Z",
              "duration": 78,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:50:13.255Z",
                  "duration": 7,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-d5d4fd7b8d82da45e5ded9f66f3d138d429d2664",
      "title": "should show application password ",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1484,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1484,
          "startTime": "2021-10-22T01:50:13.263Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:50:13.263Z",
              "duration": 1371,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:50:13.272Z",
                  "duration": 212,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:50:13.485Z",
                  "duration": 1149,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:50:14.635Z",
              "duration": 42,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:50:14.677Z",
              "duration": 70,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:50:14.743Z",
                  "duration": 2,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-0a9c2d2af1f63992e08988ac35baf5f4635f0aba",
      "title": "should show locked user error",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 2209,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2209,
          "startTime": "2021-10-22T01:50:14.748Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:50:14.748Z",
              "duration": 1345,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:50:14.760Z",
                  "duration": 193,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:50:14.954Z",
                  "duration": 1139,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-10-22T01:50:16.094Z",
              "duration": 351,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:50:16.446Z",
              "duration": 252,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:50:16.698Z",
              "duration": 114,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-22T01:50:16.813Z",
              "duration": 38,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:50:16.852Z",
              "duration": 18,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:50:16.870Z",
              "duration": 87,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:50:16.953Z",
                  "duration": 3,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-906f64914a7dc55b501d00bd4c44b1bd0e2b6a0b",
      "title": "should show username is required error",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 2893,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2893,
          "startTime": "2021-10-22T01:50:16.208Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:50:16.209Z",
              "duration": 2385,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:50:16.921Z",
                  "duration": 326,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:50:17.249Z",
                  "duration": 1345,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-10-22T01:50:18.596Z",
              "duration": 40,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:50:18.637Z",
              "duration": 172,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:50:18.810Z",
              "duration": 100,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-22T01:50:18.911Z",
              "duration": 31,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:50:18.945Z",
              "duration": 31,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:50:18.976Z",
              "duration": 124,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:50:19.087Z",
                  "duration": 9,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-75c573a7e885e1bbca3a52f7323ed54b225fac7b",
      "title": "should show username and password doesn't match",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 2110,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2110,
          "startTime": "2021-10-22T01:50:19.102Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:50:19.102Z",
              "duration": 1668,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:50:19.125Z",
                  "duration": 382,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:50:19.508Z",
                  "duration": 1262,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-10-22T01:50:20.771Z",
              "duration": 107,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:50:20.878Z",
              "duration": 114,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:50:20.992Z",
              "duration": 102,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-22T01:50:21.095Z",
              "duration": 23,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:50:21.119Z",
              "duration": 14,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:50:21.133Z",
              "duration": 79,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:50:21.209Z",
                  "duration": 3,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-3fd94e617156417a9c557ee2732f66a2a01f6c63",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2018,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2018,
          "startTime": "2021-10-22T01:50:21.215Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:50:21.215Z",
              "duration": 1386,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:50:21.228Z",
                  "duration": 196,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:50:21.425Z",
                  "duration": 1176,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-10-22T01:50:22.602Z",
              "duration": 154,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:50:22.757Z",
              "duration": 79,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:50:22.837Z",
              "duration": 143,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-22T01:50:22.980Z",
              "duration": 170,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:50:23.151Z",
              "duration": 82,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:50:23.229Z",
                  "duration": 3,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-7df21eebd96905f145a8b09f44facd986f3830d3",
      "title": "should be at the login url",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1390,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1390,
          "startTime": "2021-10-22T01:51:56.079Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:51:56.083Z",
              "duration": 1066,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:51:56.090Z",
                  "duration": 44,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:51:56.136Z",
                  "duration": 1013,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-22T01:51:57.150Z",
              "duration": 24,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:51:57.175Z",
              "duration": 294,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:51:57.458Z",
                  "duration": 10,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-068d8b68e56284ab73c2dc73dde83a3acefdfd1b",
      "title": "should show accepted users",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1352,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1352,
          "startTime": "2021-10-22T01:51:57.469Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:51:57.470Z",
              "duration": 1032,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:51:57.475Z",
                  "duration": 40,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:51:57.515Z",
                  "duration": 986,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-10-22T01:51:58.502Z",
              "duration": 24,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-10-22T01:51:58.527Z",
              "duration": 1,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:51:58.528Z",
              "duration": 293,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:51:58.795Z",
                  "duration": 24,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-6b13251d015ab5ef1dcaf8641fb5eb5723c46f74",
      "title": "should show application password ",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1383,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1383,
          "startTime": "2021-10-22T01:51:58.822Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:51:58.822Z",
              "duration": 1082,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:51:58.828Z",
                  "duration": 51,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:51:58.879Z",
                  "duration": 1025,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:51:59.905Z",
              "duration": 25,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:51:59.930Z",
              "duration": 275,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:52:00.195Z",
                  "duration": 9,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-07b3e55e3cb192070799c55d9681cde48078bb8a",
      "title": "should show locked user error",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 1650,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1650,
          "startTime": "2021-10-22T01:52:00.205Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:52:00.207Z",
              "duration": 1066,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:52:00.218Z",
                  "duration": 37,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:52:00.255Z",
                  "duration": 1018,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-10-22T01:52:01.274Z",
              "duration": 100,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:52:01.375Z",
              "duration": 62,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:52:01.438Z",
              "duration": 62,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-22T01:52:01.501Z",
              "duration": 10,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:52:01.513Z",
              "duration": 9,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:52:01.522Z",
              "duration": 332,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:52:01.825Z",
                  "duration": 29,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-10982357e305bfe81eecf5a3263abf442058a788",
      "title": "should show username is required error",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 1869,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1869,
          "startTime": "2021-10-22T01:52:01.855Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:52:01.855Z",
              "duration": 1201,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:52:01.860Z",
                  "duration": 55,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:52:01.915Z",
                  "duration": 1141,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-10-22T01:52:03.057Z",
              "duration": 42,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:52:03.099Z",
              "duration": 115,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:52:03.214Z",
              "duration": 67,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-22T01:52:03.281Z",
              "duration": 25,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:52:03.311Z",
              "duration": 30,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:52:03.341Z",
              "duration": 383,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:52:03.696Z",
                  "duration": 27,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-842cc783eaac7a254230d2e1d6f2b0b6fde50f7c",
      "title": "should show username and password doesn't match",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 2175,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2175,
          "startTime": "2021-10-22T01:52:02.880Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:52:02.881Z",
              "duration": 1562,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:52:03.154Z",
                  "duration": 100,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:52:03.256Z",
                  "duration": 1187,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-10-22T01:52:04.444Z",
              "duration": 128,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:52:04.573Z",
              "duration": 73,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:52:04.647Z",
              "duration": 68,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-22T01:52:04.716Z",
              "duration": 28,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-22T01:52:04.746Z",
              "duration": 19,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:52:04.766Z",
              "duration": 289,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:52:05.044Z",
                  "duration": 10,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-d95a7b070a52d81bd1fbd367c1a74a79b9b59643",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2417,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2417,
          "startTime": "2021-10-22T01:52:05.056Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-22T01:52:05.057Z",
              "duration": 1349,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-22T01:52:05.065Z",
                  "duration": 46,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-22T01:52:05.112Z",
                  "duration": 1293,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-10-22T01:52:06.406Z",
              "duration": 87,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-22T01:52:06.493Z",
              "duration": 53,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-22T01:52:06.547Z",
              "duration": 162,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-22T01:52:06.710Z",
              "duration": 34,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-22T01:52:06.744Z",
              "duration": 729,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-22T01:52:07.467Z",
                  "duration": 5,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    }
  ]
}