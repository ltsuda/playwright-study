{
  "fileId": "828880cd000e86f5272d4d70d617874cbf229e69",
  "fileName": "login.spec.js",
  "tests": [
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-ef22888abdd50efb3973a72a8c97e417cef37057",
      "title": "should be at the login url",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1145,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1145,
          "startTime": "2021-10-28T01:24:58.824Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:24:58.824Z",
              "duration": 1022,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:24:58.828Z",
                  "duration": 62,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:24:58.891Z",
                  "duration": 955,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-28T01:24:59.847Z",
              "duration": 25,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:24:59.872Z",
              "duration": 97,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:24:59.963Z",
                  "duration": 6,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-405e2bbb49e635acc9db6b60d8b2b005c1f10ab2",
      "title": "should show accepted users",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1332,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1332,
          "startTime": "2021-10-28T01:24:59.971Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:24:59.971Z",
              "duration": 1193,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:24:59.976Z",
                  "duration": 43,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:25:00.020Z",
                  "duration": 1144,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-10-28T01:25:01.165Z",
              "duration": 26,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-10-28T01:25:01.192Z",
              "duration": 0,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:25:01.192Z",
              "duration": 111,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:25:01.296Z",
                  "duration": 7,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-d8dab2e7caad71d6fe1a9470e29b7a77e0e8ffaa",
      "title": "should show application password ",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1209,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1209,
          "startTime": "2021-10-28T01:25:00.531Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:25:00.532Z",
              "duration": 1063,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:25:00.542Z",
                  "duration": 48,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:25:00.592Z",
                  "duration": 1003,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:25:01.595Z",
              "duration": 32,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:25:01.627Z",
              "duration": 113,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:25:01.725Z",
                  "duration": 15,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-8f7089443c527c6a0de17e8b399c420dfb5b482e",
      "title": "should show locked user error",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 1392,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1392,
          "startTime": "2021-10-28T01:25:01.304Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:25:01.304Z",
              "duration": 1072,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:25:01.311Z",
                  "duration": 45,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:25:01.356Z",
                  "duration": 1020,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-10-28T01:25:02.377Z",
              "duration": 99,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:25:02.477Z",
              "duration": 47,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:25:02.526Z",
              "duration": 62,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-28T01:25:02.589Z",
              "duration": 7,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:25:02.597Z",
              "duration": 11,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:25:02.608Z",
              "duration": 88,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:25:02.690Z",
                  "duration": 6,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-215a1e9cb271011fd3cc91896b3f5fdaa8ff218c",
      "title": "should show username is required error",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 1384,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1384,
          "startTime": "2021-10-28T01:25:01.741Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:25:01.741Z",
              "duration": 1016,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:25:01.746Z",
                  "duration": 72,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:25:01.818Z",
                  "duration": 938,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-10-28T01:25:02.757Z",
              "duration": 57,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:25:02.815Z",
              "duration": 83,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:25:02.898Z",
              "duration": 46,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-28T01:25:02.944Z",
              "duration": 9,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:25:02.954Z",
              "duration": 15,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:25:02.969Z",
              "duration": 156,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:25:03.113Z",
                  "duration": 11,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-fb46c22e2b845ed63d73c8f8d7035fcb7e2e55e5",
      "title": "should show username and password doesn't match",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 1591,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1591,
          "startTime": "2021-10-28T01:25:02.697Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:25:02.698Z",
              "duration": 1283,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:25:02.701Z",
                  "duration": 44,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:25:02.745Z",
                  "duration": 1235,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-10-28T01:25:03.981Z",
              "duration": 61,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:25:04.043Z",
              "duration": 56,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:25:04.099Z",
              "duration": 55,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-28T01:25:04.155Z",
              "duration": 9,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:25:04.164Z",
              "duration": 6,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:25:04.171Z",
              "duration": 117,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:25:04.280Z",
                  "duration": 8,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-f2908767cc70b5dc762a4ca12728e0698d20641c",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2526,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2526,
          "startTime": "2021-10-28T01:25:03.125Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:25:03.125Z",
              "duration": 1237,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:25:03.130Z",
                  "duration": 54,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:25:03.184Z",
                  "duration": 1177,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-10-28T01:25:04.363Z",
              "duration": 167,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:25:04.531Z",
              "duration": 86,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:25:04.617Z",
              "duration": 209,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-28T01:25:04.826Z",
              "duration": 25,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:25:04.852Z",
              "duration": 799,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:25:05.638Z",
                  "duration": 13,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-d4a40aae9b95663fd5c88ef14677e8bb61c7bde8",
      "title": "should be at the login url",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1395,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1395,
          "startTime": "2021-10-28T01:26:13.782Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:26:13.782Z",
              "duration": 1164,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:26:13.788Z",
                  "duration": 36,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:26:13.825Z",
                  "duration": 1121,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-28T01:26:14.947Z",
              "duration": 26,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:26:14.973Z",
              "duration": 203,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:26:15.167Z",
                  "duration": 9,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-9c77119013e08e85d363416c4b1c050ec55e05a4",
      "title": "should show accepted users",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1565,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1565,
          "startTime": "2021-10-28T01:26:15.178Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:26:15.178Z",
              "duration": 1311,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:26:15.184Z",
                  "duration": 48,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:26:15.232Z",
                  "duration": 1257,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-10-28T01:26:16.490Z",
              "duration": 23,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-10-28T01:26:16.513Z",
              "duration": 0,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:26:16.513Z",
              "duration": 231,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:26:16.718Z",
                  "duration": 23,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-3bb7025f4b165cf17d7f9b94251db9877e9405fd",
      "title": "should show application password ",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1473,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1473,
          "startTime": "2021-10-28T01:26:15.214Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:26:15.223Z",
              "duration": 1244,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:26:15.247Z",
                  "duration": 54,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:26:15.301Z",
                  "duration": 1166,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:26:16.467Z",
              "duration": 22,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:26:16.489Z",
              "duration": 198,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:26:16.676Z",
                  "duration": 9,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-c1e4d61d3141458e677debff8bc4e0975afcb354",
      "title": "should show locked user error",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 1824,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1824,
          "startTime": "2021-10-28T01:26:16.688Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:26:16.688Z",
              "duration": 1353,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:26:16.692Z",
                  "duration": 58,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:26:16.750Z",
                  "duration": 1291,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-10-28T01:26:18.042Z",
              "duration": 112,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:26:18.154Z",
              "duration": 59,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:26:18.214Z",
              "duration": 67,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-28T01:26:18.281Z",
              "duration": 7,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:26:18.289Z",
              "duration": 10,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:26:18.300Z",
              "duration": 212,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:26:18.491Z",
                  "duration": 20,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-8aa37dfeed724766eae4fd8967d88f51ddd4b55f",
      "title": "should show username is required error",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 1748,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1748,
          "startTime": "2021-10-28T01:26:16.744Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:26:16.744Z",
              "duration": 1343,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:26:16.753Z",
                  "duration": 89,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:26:16.843Z",
                  "duration": 1244,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-10-28T01:26:18.087Z",
              "duration": 32,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:26:18.119Z",
              "duration": 81,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:26:18.200Z",
              "duration": 51,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-28T01:26:18.252Z",
              "duration": 10,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:26:18.263Z",
              "duration": 14,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:26:18.277Z",
              "duration": 215,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:26:18.473Z",
                  "duration": 19,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-fc970eda40ffc9fa4945cec93d585ced539b72a2",
      "title": "should show username and password doesn't match",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 1782,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1782,
          "startTime": "2021-10-28T01:26:18.493Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:26:18.493Z",
              "duration": 1241,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:26:18.499Z",
                  "duration": 55,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:26:18.554Z",
                  "duration": 1180,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-10-28T01:26:19.735Z",
              "duration": 71,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:26:19.806Z",
              "duration": 79,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:26:19.886Z",
              "duration": 76,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-28T01:26:19.962Z",
              "duration": 10,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:26:19.973Z",
              "duration": 13,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:26:19.986Z",
              "duration": 289,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:26:20.257Z",
                  "duration": 17,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-69650c3afd3e98144a8bc477b940ace583638e80",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2795,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2795,
          "startTime": "2021-10-28T01:26:18.512Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:26:18.512Z",
              "duration": 1240,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:26:18.518Z",
                  "duration": 95,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:26:18.614Z",
                  "duration": 1138,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-10-28T01:26:19.752Z",
              "duration": 119,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:26:19.872Z",
              "duration": 112,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:26:19.984Z",
              "duration": 226,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-28T01:26:20.210Z",
              "duration": 108,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:26:20.318Z",
              "duration": 990,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:26:21.291Z",
                  "duration": 16,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-902990b201eaf9c0956f7da461961c8b52b50998",
      "title": "should be at the login url",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1227,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1227,
          "startTime": "2021-10-28T01:27:19.637Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:27:19.637Z",
              "duration": 1095,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:27:19.642Z",
                  "duration": 38,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:27:19.681Z",
                  "duration": 1051,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-28T01:27:20.732Z",
              "duration": 24,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:27:20.756Z",
              "duration": 108,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:27:20.850Z",
                  "duration": 14,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-5a40f2b07ad4bec508c011653ed48b8b08184d57",
      "title": "should show accepted users",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1374,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1374,
          "startTime": "2021-10-28T01:27:20.867Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:27:20.867Z",
              "duration": 1263,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:27:20.873Z",
                  "duration": 46,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:27:20.920Z",
                  "duration": 1210,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-10-28T01:27:22.131Z",
              "duration": 20,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-10-28T01:27:22.151Z",
              "duration": 0,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:27:22.151Z",
              "duration": 90,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:27:22.233Z",
                  "duration": 8,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-b5d0baca6632d947484cb0f06b435c86fffa9783",
      "title": "should show application password ",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1362,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1362,
          "startTime": "2021-10-28T01:27:21.065Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:27:21.066Z",
              "duration": 1179,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:27:21.080Z",
                  "duration": 50,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:27:21.131Z",
                  "duration": 1114,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:27:22.245Z",
              "duration": 22,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:27:22.267Z",
              "duration": 160,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:27:22.414Z",
                  "duration": 13,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-b27e60e291baa2766110fa88f6b576fd09d005f9",
      "title": "should show locked user error",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 1542,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1542,
          "startTime": "2021-10-28T01:27:22.242Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:27:22.242Z",
              "duration": 1172,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:27:22.249Z",
                  "duration": 52,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:27:22.302Z",
                  "duration": 1112,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-10-28T01:27:23.415Z",
              "duration": 87,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:27:23.503Z",
              "duration": 52,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:27:23.556Z",
              "duration": 68,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-28T01:27:23.624Z",
              "duration": 13,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:27:23.637Z",
              "duration": 25,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:27:23.662Z",
              "duration": 123,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:27:23.760Z",
                  "duration": 24,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-165c1b436a7f47ac5fa7c09c90f01541b52ae81f",
      "title": "should show username is required error",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 1423,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1423,
          "startTime": "2021-10-28T01:27:22.429Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:27:22.429Z",
              "duration": 1133,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:27:22.446Z",
                  "duration": 79,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:27:22.525Z",
                  "duration": 1037,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-10-28T01:27:23.563Z",
              "duration": 23,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:27:23.586Z",
              "duration": 63,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:27:23.650Z",
              "duration": 70,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-28T01:27:23.720Z",
              "duration": 9,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:27:23.729Z",
              "duration": 14,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:27:23.743Z",
              "duration": 108,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:27:23.839Z",
                  "duration": 12,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-92bd631756721d575633888b13e68f7d24715ed2",
      "title": "should show username and password doesn't match",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 1588,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1588,
          "startTime": "2021-10-28T01:27:23.785Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:27:23.785Z",
              "duration": 1272,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:27:23.794Z",
                  "duration": 68,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:27:23.863Z",
                  "duration": 1194,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-10-28T01:27:25.057Z",
              "duration": 61,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:27:25.119Z",
              "duration": 54,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:27:25.173Z",
              "duration": 39,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-28T01:27:25.212Z",
              "duration": 12,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:27:25.225Z",
              "duration": 12,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:27:25.237Z",
              "duration": 136,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:27:25.353Z",
                  "duration": 20,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-a821bd2e7f071e153a367200b5602cdc39f953ab",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2339,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2339,
          "startTime": "2021-10-28T01:27:23.852Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:27:23.852Z",
              "duration": 1186,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:27:23.859Z",
                  "duration": 71,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:27:23.930Z",
                  "duration": 1108,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-10-28T01:27:25.039Z",
              "duration": 76,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:27:25.115Z",
              "duration": 47,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:27:25.162Z",
              "duration": 167,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-28T01:27:25.330Z",
              "duration": 54,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:27:25.384Z",
              "duration": 806,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:27:26.165Z",
                  "duration": 19,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-64ccd2abeb66bd09488581d21ba08ee6e66bb9ff",
      "title": "should be at the login url",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1769,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1769,
          "startTime": "2021-10-28T01:28:48.753Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:28:48.754Z",
              "duration": 1624,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:28:48.790Z",
                  "duration": 340,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:28:49.131Z",
                  "duration": 1247,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-28T01:28:50.378Z",
              "duration": 66,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:28:50.444Z",
              "duration": 78,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:28:50.512Z",
                  "duration": 8,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-e8f2af6a57b040b5c2ed8dbd17619e49f1874686",
      "title": "should show accepted users",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1630,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1630,
          "startTime": "2021-10-28T01:28:50.528Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:28:50.528Z",
              "duration": 1508,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:28:50.555Z",
                  "duration": 238,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:28:50.794Z",
                  "duration": 1241,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-10-28T01:28:52.036Z",
              "duration": 47,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-10-28T01:28:52.084Z",
              "duration": 0,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:28:52.084Z",
              "duration": 74,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:28:52.145Z",
                  "duration": 11,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-6d79ee52f5e52d37b2bba06c96f0c3f60050387e",
      "title": "should show application password ",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1634,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1634,
          "startTime": "2021-10-28T01:28:51.402Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:28:51.403Z",
              "duration": 1494,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:28:51.429Z",
                  "duration": 280,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:28:51.710Z",
                  "duration": 1187,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:28:52.898Z",
              "duration": 47,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:28:52.945Z",
              "duration": 90,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:28:53.024Z",
                  "duration": 11,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-87b33f996b98dd8f69efc7fbd60970a5044162d7",
      "title": "should show locked user error",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 2231,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2231,
          "startTime": "2021-10-28T01:28:52.159Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:28:52.159Z",
              "duration": 1512,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:28:52.180Z",
                  "duration": 358,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:28:52.539Z",
                  "duration": 1131,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-10-28T01:28:53.671Z",
              "duration": 273,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:28:53.945Z",
              "duration": 154,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:28:54.099Z",
              "duration": 142,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-28T01:28:54.242Z",
              "duration": 55,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:28:54.298Z",
              "duration": 24,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:28:54.322Z",
              "duration": 68,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:28:54.378Z",
                  "duration": 11,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-7d8442de6d8e0d0a6d6b8066409f6b3df9674c5d",
      "title": "should show username is required error",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 2476,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2476,
          "startTime": "2021-10-28T01:28:53.036Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:28:53.038Z",
              "duration": 1701,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:28:53.078Z",
                  "duration": 349,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:28:53.428Z",
                  "duration": 1311,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-10-28T01:28:54.740Z",
              "duration": 59,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:28:54.800Z",
              "duration": 191,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:28:54.992Z",
              "duration": 267,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-28T01:28:55.260Z",
              "duration": 81,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:28:55.342Z",
              "duration": 60,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:28:55.402Z",
              "duration": 111,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:28:55.495Z",
                  "duration": 17,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-1026593a957da30075efc811c273142269eba20c",
      "title": "should show username and password doesn't match",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 2612,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2612,
          "startTime": "2021-10-28T01:28:54.393Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:28:54.393Z",
              "duration": 2123,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:28:54.410Z",
                  "duration": 322,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:28:54.733Z",
                  "duration": 1783,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-10-28T01:28:56.517Z",
              "duration": 189,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:28:56.707Z",
              "duration": 114,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:28:56.822Z",
              "duration": 75,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-28T01:28:56.897Z",
              "duration": 19,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:28:56.916Z",
              "duration": 26,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:28:56.942Z",
              "duration": 64,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:28:56.993Z",
                  "duration": 12,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-f214f86175adfcf14e0c7cbd762502df0f38c2bd",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 3168,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 3168,
          "startTime": "2021-10-28T01:28:55.513Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:28:55.514Z",
              "duration": 1634,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:28:55.548Z",
                  "duration": 412,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:28:55.961Z",
                  "duration": 1186,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-10-28T01:28:57.148Z",
              "duration": 367,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:28:57.515Z",
              "duration": 441,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:28:57.956Z",
              "duration": 189,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-28T01:28:58.146Z",
              "duration": 169,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:28:58.315Z",
              "duration": 366,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:28:58.663Z",
                  "duration": 15,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-8d02882f9444a7d58c923750a3a161f4b3231528",
      "title": "should be at the login url",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 2188,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2188,
          "startTime": "2021-10-28T01:30:10.177Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:30:10.178Z",
              "duration": 2106,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:30:10.201Z",
                  "duration": 272,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:30:10.481Z",
                  "duration": 1803,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-28T01:30:12.285Z",
              "duration": 28,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:30:12.313Z",
              "duration": 49,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:30:12.359Z",
                  "duration": 3,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-1db7d1ba52f9caace3a98e4ddcadd4ad67fba2e5",
      "title": "should show accepted users",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1649,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1649,
          "startTime": "2021-10-28T01:30:12.366Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:30:12.367Z",
              "duration": 1566,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:30:12.374Z",
                  "duration": 225,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:30:12.600Z",
                  "duration": 1333,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-10-28T01:30:13.934Z",
              "duration": 30,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-10-28T01:30:13.965Z",
              "duration": 0,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:30:13.965Z",
              "duration": 50,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:30:14.011Z",
                  "duration": 4,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-c56eb469bcc3a498408fb606e977c6fb27bf76ee",
      "title": "should show application password ",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1496,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1496,
          "startTime": "2021-10-28T01:30:12.933Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:30:12.933Z",
              "duration": 1384,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:30:12.956Z",
                  "duration": 224,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:30:13.181Z",
                  "duration": 1136,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:30:14.318Z",
              "duration": 43,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:30:14.362Z",
              "duration": 67,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:30:14.427Z",
                  "duration": 1,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-31ae6a3ba511899157690ffb0133d6273d3435c0",
      "title": "should show locked user error",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 1858,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1858,
          "startTime": "2021-10-28T01:30:14.016Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:30:14.016Z",
              "duration": 1396,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:30:14.029Z",
                  "duration": 162,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:30:14.192Z",
                  "duration": 1220,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-10-28T01:30:15.413Z",
              "duration": 178,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:30:15.591Z",
              "duration": 101,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:30:15.693Z",
              "duration": 79,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-28T01:30:15.773Z",
              "duration": 30,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:30:15.803Z",
              "duration": 14,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:30:15.817Z",
              "duration": 58,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:30:15.872Z",
                  "duration": 2,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-68ed1c7975f8e9628d87cdd0b45503d97dcf6c5c",
      "title": "should show username is required error",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 1772,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1772,
          "startTime": "2021-10-28T01:30:14.429Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:30:14.429Z",
              "duration": 1358,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:30:14.455Z",
                  "duration": 217,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:30:14.672Z",
                  "duration": 1115,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-10-28T01:30:15.788Z",
              "duration": 41,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:30:15.830Z",
              "duration": 194,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:30:16.024Z",
              "duration": 85,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-28T01:30:16.110Z",
              "duration": 29,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:30:16.140Z",
              "duration": 12,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:30:16.152Z",
              "duration": 50,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:30:16.199Z",
                  "duration": 1,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-25d3fe9f6a8f27def8257f5e7ce7afdb4982e603",
      "title": "should show username and password doesn't match",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 2135,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2135,
          "startTime": "2021-10-28T01:30:15.875Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:30:15.876Z",
              "duration": 1697,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:30:15.910Z",
                  "duration": 360,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:30:16.271Z",
                  "duration": 1302,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-10-28T01:30:17.574Z",
              "duration": 96,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:30:17.670Z",
              "duration": 101,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:30:17.771Z",
              "duration": 103,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-28T01:30:17.874Z",
              "duration": 33,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:30:17.908Z",
              "duration": 37,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:30:17.945Z",
              "duration": 65,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:30:18.004Z",
                  "duration": 6,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-a94233a7b41c4d8fec1b2944b45d03a211ba00bf",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2822,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2822,
          "startTime": "2021-10-28T01:30:16.202Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:30:16.202Z",
              "duration": 1540,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:30:16.227Z",
                  "duration": 252,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:30:16.480Z",
                  "duration": 1261,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-10-28T01:30:17.742Z",
              "duration": 349,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:30:18.092Z",
              "duration": 213,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:30:18.306Z",
              "duration": 178,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-28T01:30:18.485Z",
              "duration": 360,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:30:18.845Z",
              "duration": 179,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:30:19.022Z",
                  "duration": 2,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-29327056d262cf56f1c9b5467f1ffb2d07166160",
      "title": "should be at the login url",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1597,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1597,
          "startTime": "2021-10-28T01:31:26.289Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:31:26.290Z",
              "duration": 1443,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:31:26.356Z",
                  "duration": 262,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:31:26.619Z",
                  "duration": 1114,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-28T01:31:27.734Z",
              "duration": 57,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:31:27.791Z",
              "duration": 95,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:31:27.879Z",
                  "duration": 1,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-dc202057ecd485193475a8424604f8b8eb702beb",
      "title": "should show accepted users",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1489,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1489,
          "startTime": "2021-10-28T01:31:27.887Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:31:27.887Z",
              "duration": 1385,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:31:27.902Z",
                  "duration": 193,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:31:28.096Z",
                  "duration": 1176,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-10-28T01:31:29.273Z",
              "duration": 27,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-10-28T01:31:29.301Z",
              "duration": 0,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:31:29.301Z",
              "duration": 74,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:31:29.371Z",
                  "duration": 4,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-d5d4fd7b8d82da45e5ded9f66f3d138d429d2664",
      "title": "should show application password ",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1537,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1537,
          "startTime": "2021-10-28T01:31:28.700Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:31:28.700Z",
              "duration": 1415,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:31:28.721Z",
                  "duration": 235,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:31:28.957Z",
                  "duration": 1158,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:31:30.115Z",
              "duration": 37,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:31:30.152Z",
              "duration": 86,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:31:30.227Z",
                  "duration": 3,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-0a9c2d2af1f63992e08988ac35baf5f4635f0aba",
      "title": "should show locked user error",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 1990,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1990,
          "startTime": "2021-10-28T01:31:29.376Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:31:29.376Z",
              "duration": 1361,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:31:29.398Z",
                  "duration": 269,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:31:29.667Z",
                  "duration": 1070,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-10-28T01:31:30.738Z",
              "duration": 241,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:31:30.979Z",
              "duration": 160,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:31:31.140Z",
              "duration": 106,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-28T01:31:31.246Z",
              "duration": 42,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:31:31.288Z",
              "duration": 13,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:31:31.301Z",
              "duration": 64,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:31:31.363Z",
                  "duration": 2,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-906f64914a7dc55b501d00bd4c44b1bd0e2b6a0b",
      "title": "should show username is required error",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 1931,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1931,
          "startTime": "2021-10-28T01:31:30.238Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:31:30.238Z",
              "duration": 1495,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:31:30.266Z",
                  "duration": 215,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:31:30.481Z",
                  "duration": 1251,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-10-28T01:31:31.733Z",
              "duration": 36,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:31:31.769Z",
              "duration": 212,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:31:31.982Z",
              "duration": 83,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-28T01:31:32.065Z",
              "duration": 18,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:31:32.083Z",
              "duration": 15,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:31:32.099Z",
              "duration": 70,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:31:32.166Z",
                  "duration": 2,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-75c573a7e885e1bbca3a52f7323ed54b225fac7b",
      "title": "should show username and password doesn't match",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 1971,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1971,
          "startTime": "2021-10-28T01:31:31.367Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:31:31.367Z",
              "duration": 1468,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:31:31.378Z",
                  "duration": 171,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:31:31.549Z",
                  "duration": 1285,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-10-28T01:31:32.835Z",
              "duration": 151,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:31:32.986Z",
              "duration": 155,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:31:33.141Z",
              "duration": 94,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-28T01:31:33.236Z",
              "duration": 29,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:31:33.267Z",
              "duration": 8,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:31:33.276Z",
              "duration": 61,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:31:33.335Z",
                  "duration": 2,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-3fd94e617156417a9c557ee2732f66a2a01f6c63",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2289,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2289,
          "startTime": "2021-10-28T01:31:32.170Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:31:32.170Z",
              "duration": 1510,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:31:32.191Z",
                  "duration": 238,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:31:32.430Z",
                  "duration": 1250,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-10-28T01:31:33.681Z",
              "duration": 206,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:31:33.887Z",
              "duration": 147,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:31:34.034Z",
              "duration": 125,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-28T01:31:34.159Z",
              "duration": 227,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:31:34.386Z",
              "duration": 73,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:31:34.456Z",
                  "duration": 2,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-7df21eebd96905f145a8b09f44facd986f3830d3",
      "title": "should be at the login url",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1306,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1306,
          "startTime": "2021-10-28T01:32:37.640Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:32:37.640Z",
              "duration": 1034,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:32:37.645Z",
                  "duration": 37,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:32:37.682Z",
                  "duration": 992,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-28T01:32:38.675Z",
              "duration": 20,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:32:38.696Z",
              "duration": 251,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:32:38.937Z",
                  "duration": 9,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-068d8b68e56284ab73c2dc73dde83a3acefdfd1b",
      "title": "should show accepted users",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1437,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1437,
          "startTime": "2021-10-28T01:32:38.947Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:32:38.947Z",
              "duration": 1176,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:32:38.953Z",
                  "duration": 61,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:32:39.015Z",
                  "duration": 1108,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-10-28T01:32:40.123Z",
              "duration": 20,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-10-28T01:32:40.144Z",
              "duration": 0,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:32:40.144Z",
              "duration": 240,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:32:40.377Z",
                  "duration": 5,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-6b13251d015ab5ef1dcaf8641fb5eb5723c46f74",
      "title": "should show application password ",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1373,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1373,
          "startTime": "2021-10-28T01:32:39.498Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:32:39.498Z",
              "duration": 1059,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:32:39.504Z",
                  "duration": 39,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:32:39.544Z",
                  "duration": 1013,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:32:40.558Z",
              "duration": 20,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:32:40.578Z",
              "duration": 293,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:32:40.858Z",
                  "duration": 13,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-07b3e55e3cb192070799c55d9681cde48078bb8a",
      "title": "should show locked user error",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 1521,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1521,
          "startTime": "2021-10-28T01:32:40.385Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:32:40.385Z",
              "duration": 1069,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:32:40.391Z",
                  "duration": 35,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:32:40.427Z",
                  "duration": 1027,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-10-28T01:32:41.454Z",
              "duration": 70,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:32:41.525Z",
              "duration": 41,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:32:41.567Z",
              "duration": 53,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-28T01:32:41.621Z",
              "duration": 7,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:32:41.628Z",
              "duration": 8,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:32:41.636Z",
              "duration": 270,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:32:41.894Z",
                  "duration": 11,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-10982357e305bfe81eecf5a3263abf442058a788",
      "title": "should show username is required error",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 1605,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1605,
          "startTime": "2021-10-28T01:32:40.872Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:32:40.872Z",
              "duration": 1005,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:32:40.876Z",
                  "duration": 55,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:32:40.932Z",
                  "duration": 945,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-10-28T01:32:41.878Z",
              "duration": 50,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:32:41.928Z",
              "duration": 117,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:32:42.046Z",
              "duration": 70,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-28T01:32:42.116Z",
              "duration": 15,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:32:42.132Z",
              "duration": 37,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:32:42.169Z",
              "duration": 308,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:32:42.453Z",
                  "duration": 24,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-842cc783eaac7a254230d2e1d6f2b0b6fde50f7c",
      "title": "should show username and password doesn't match",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 1656,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1656,
          "startTime": "2021-10-28T01:32:41.907Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:32:41.907Z",
              "duration": 1225,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:32:41.911Z",
                  "duration": 42,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:32:41.953Z",
                  "duration": 1179,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-10-28T01:32:43.133Z",
              "duration": 52,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:32:43.186Z",
              "duration": 47,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:32:43.233Z",
              "duration": 53,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-28T01:32:43.286Z",
              "duration": 8,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-28T01:32:43.295Z",
              "duration": 6,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:32:43.301Z",
              "duration": 262,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:32:43.549Z",
                  "duration": 10,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-d95a7b070a52d81bd1fbd367c1a74a79b9b59643",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2224,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2224,
          "startTime": "2021-10-28T01:32:42.478Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-28T01:32:42.478Z",
              "duration": 1074,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-28T01:32:42.484Z",
                  "duration": 62,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-28T01:32:42.547Z",
                  "duration": 1005,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-10-28T01:32:43.552Z",
              "duration": 97,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-28T01:32:43.650Z",
              "duration": 74,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-28T01:32:43.725Z",
              "duration": 221,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-28T01:32:43.946Z",
              "duration": 48,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-28T01:32:43.994Z",
              "duration": 707,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-28T01:32:44.668Z",
                  "duration": 21,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    }
  ]
}