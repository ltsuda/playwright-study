{
  "fileId": "828880cd000e86f5272d4d70d617874cbf229e69",
  "fileName": "login.spec.js",
  "tests": [
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-ef22888abdd50efb3973a72a8c97e417cef37057",
      "title": "should be at the login url",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1088,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1088,
          "startTime": "2021-11-03T02:08:42.666Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:08:42.666Z",
              "duration": 974,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:08:42.670Z",
                  "duration": 29,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:08:42.700Z",
                  "duration": 940,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-11-03T02:08:43.641Z",
              "duration": 23,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:08:43.664Z",
              "duration": 90,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:08:43.748Z",
                  "duration": 6,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-405e2bbb49e635acc9db6b60d8b2b005c1f10ab2",
      "title": "should show accepted users",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1206,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1206,
          "startTime": "2021-11-03T02:08:43.754Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:08:43.754Z",
              "duration": 1099,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:08:43.761Z",
                  "duration": 40,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:08:43.802Z",
                  "duration": 1051,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-11-03T02:08:44.854Z",
              "duration": 19,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-11-03T02:08:44.873Z",
              "duration": 0,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:08:44.873Z",
              "duration": 86,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:08:44.952Z",
                  "duration": 7,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-d8dab2e7caad71d6fe1a9470e29b7a77e0e8ffaa",
      "title": "should show application password ",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1162,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1162,
          "startTime": "2021-11-03T02:08:44.068Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:08:44.068Z",
              "duration": 992,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:08:44.071Z",
                  "duration": 35,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:08:44.109Z",
                  "duration": 951,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:08:45.061Z",
              "duration": 31,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:08:45.092Z",
              "duration": 138,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:08:45.219Z",
                  "duration": 10,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-8f7089443c527c6a0de17e8b399c420dfb5b482e",
      "title": "should show locked user error",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 1365,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1365,
          "startTime": "2021-11-03T02:08:44.960Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:08:44.960Z",
              "duration": 1072,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:08:44.965Z",
                  "duration": 34,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:08:44.999Z",
                  "duration": 1033,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-11-03T02:08:46.033Z",
              "duration": 66,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:08:46.099Z",
              "duration": 38,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:08:46.137Z",
              "duration": 57,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-11-03T02:08:46.195Z",
              "duration": 6,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:08:46.201Z",
              "duration": 10,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:08:46.211Z",
              "duration": 113,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:08:46.309Z",
                  "duration": 15,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-215a1e9cb271011fd3cc91896b3f5fdaa8ff218c",
      "title": "should show username is required error",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 1316,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1316,
          "startTime": "2021-11-03T02:08:45.231Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:08:45.231Z",
              "duration": 1006,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:08:45.234Z",
                  "duration": 36,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:08:45.270Z",
                  "duration": 967,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-11-03T02:08:46.238Z",
              "duration": 28,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:08:46.267Z",
              "duration": 57,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:08:46.325Z",
              "duration": 66,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-11-03T02:08:46.391Z",
              "duration": 8,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:08:46.400Z",
              "duration": 25,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:08:46.425Z",
              "duration": 122,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:08:46.529Z",
                  "duration": 18,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-fb46c22e2b845ed63d73c8f8d7035fcb7e2e55e5",
      "title": "should show username and password doesn't match",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 1420,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1420,
          "startTime": "2021-11-03T02:08:46.325Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:08:46.325Z",
              "duration": 1145,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:08:46.330Z",
                  "duration": 48,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:08:46.378Z",
                  "duration": 1092,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-11-03T02:08:47.471Z",
              "duration": 43,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:08:47.515Z",
              "duration": 36,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:08:47.551Z",
              "duration": 64,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-11-03T02:08:47.616Z",
              "duration": 9,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:08:47.626Z",
              "duration": 9,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:08:47.635Z",
              "duration": 110,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:08:47.726Z",
                  "duration": 19,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-f2908767cc70b5dc762a4ca12728e0698d20641c",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2106,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2106,
          "startTime": "2021-11-03T02:08:46.548Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:08:46.548Z",
              "duration": 1055,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:08:46.554Z",
                  "duration": 64,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:08:46.618Z",
                  "duration": 985,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-11-03T02:08:47.604Z",
              "duration": 94,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:08:47.699Z",
              "duration": 50,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:08:47.750Z",
              "duration": 177,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-11-03T02:08:47.927Z",
              "duration": 39,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:08:47.966Z",
              "duration": 688,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:08:48.648Z",
                  "duration": 5,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-d4a40aae9b95663fd5c88ef14677e8bb61c7bde8",
      "title": "should be at the login url",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1204,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1204,
          "startTime": "2021-11-03T02:09:48.102Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:09:48.102Z",
              "duration": 1009,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:09:48.106Z",
                  "duration": 33,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:09:48.139Z",
                  "duration": 972,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-11-03T02:09:49.111Z",
              "duration": 22,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:09:49.133Z",
              "duration": 173,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:09:49.299Z",
                  "duration": 7,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-9c77119013e08e85d363416c4b1c050ec55e05a4",
      "title": "should show accepted users",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1169,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1169,
          "startTime": "2021-11-03T02:09:48.716Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:09:48.716Z",
              "duration": 970,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:09:48.720Z",
                  "duration": 28,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:09:48.748Z",
                  "duration": 938,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-11-03T02:09:49.687Z",
              "duration": 17,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-11-03T02:09:49.705Z",
              "duration": 0,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:09:49.705Z",
              "duration": 180,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:09:49.877Z",
                  "duration": 7,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-3bb7025f4b165cf17d7f9b94251db9877e9405fd",
      "title": "should show application password ",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1164,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1164,
          "startTime": "2021-11-03T02:09:49.307Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:09:49.307Z",
              "duration": 951,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:09:49.313Z",
                  "duration": 28,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:09:49.342Z",
                  "duration": 916,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:09:50.258Z",
              "duration": 26,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:09:50.284Z",
              "duration": 187,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:09:50.463Z",
                  "duration": 6,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-c1e4d61d3141458e677debff8bc4e0975afcb354",
      "title": "should show locked user error",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 1337,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1337,
          "startTime": "2021-11-03T02:09:49.885Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:09:49.885Z",
              "duration": 958,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:09:49.889Z",
                  "duration": 34,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:09:49.924Z",
                  "duration": 919,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-11-03T02:09:50.844Z",
              "duration": 103,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:09:50.948Z",
              "duration": 39,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:09:50.987Z",
              "duration": 51,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-11-03T02:09:51.039Z",
              "duration": 5,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:09:51.045Z",
              "duration": 6,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:09:51.051Z",
              "duration": 171,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:09:51.217Z",
                  "duration": 5,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-8aa37dfeed724766eae4fd8967d88f51ddd4b55f",
      "title": "should show username is required error",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 1298,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1298,
          "startTime": "2021-11-03T02:09:50.471Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:09:50.471Z",
              "duration": 951,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:09:50.476Z",
                  "duration": 26,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:09:50.503Z",
                  "duration": 919,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-11-03T02:09:51.423Z",
              "duration": 27,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:09:51.450Z",
              "duration": 67,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:09:51.517Z",
              "duration": 59,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-11-03T02:09:51.577Z",
              "duration": 6,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:09:51.584Z",
              "duration": 10,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:09:51.594Z",
              "duration": 175,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:09:51.759Z",
                  "duration": 7,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-fc970eda40ffc9fa4945cec93d585ced539b72a2",
      "title": "should show username and password doesn't match",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 1332,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1332,
          "startTime": "2021-11-03T02:09:51.223Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:09:51.223Z",
              "duration": 1014,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:09:51.230Z",
                  "duration": 34,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:09:51.265Z",
                  "duration": 972,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-11-03T02:09:52.237Z",
              "duration": 56,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:09:52.293Z",
              "duration": 56,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:09:52.350Z",
              "duration": 37,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-11-03T02:09:52.388Z",
              "duration": 5,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:09:52.394Z",
              "duration": 5,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:09:52.399Z",
              "duration": 156,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:09:52.550Z",
                  "duration": 5,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-69650c3afd3e98144a8bc477b940ace583638e80",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 1910,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1910,
          "startTime": "2021-11-03T02:09:51.772Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:09:51.772Z",
              "duration": 1067,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:09:51.776Z",
                  "duration": 29,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:09:51.806Z",
                  "duration": 1033,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-11-03T02:09:52.840Z",
              "duration": 76,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:09:52.916Z",
              "duration": 50,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:09:52.966Z",
              "duration": 125,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-11-03T02:09:53.096Z",
              "duration": 25,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:09:53.121Z",
              "duration": 561,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:09:53.663Z",
                  "duration": 19,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-902990b201eaf9c0956f7da461961c8b52b50998",
      "title": "should be at the login url",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1135,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1135,
          "startTime": "2021-11-03T02:10:47.481Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:10:47.481Z",
              "duration": 987,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:10:47.484Z",
                  "duration": 35,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:10:47.520Z",
                  "duration": 948,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-11-03T02:10:48.469Z",
              "duration": 18,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:10:48.487Z",
              "duration": 128,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:10:48.603Z",
                  "duration": 12,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-5a40f2b07ad4bec508c011653ed48b8b08184d57",
      "title": "should show accepted users",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1216,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1216,
          "startTime": "2021-11-03T02:10:48.518Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:10:48.518Z",
              "duration": 1123,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:10:48.525Z",
                  "duration": 48,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:10:48.574Z",
                  "duration": 1066,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-11-03T02:10:49.641Z",
              "duration": 20,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-11-03T02:10:49.661Z",
              "duration": 0,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:10:49.661Z",
              "duration": 73,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:10:49.730Z",
                  "duration": 4,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-b5d0baca6632d947484cb0f06b435c86fffa9783",
      "title": "should show application password ",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1281,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1281,
          "startTime": "2021-11-03T02:10:48.616Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:10:48.616Z",
              "duration": 1123,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:10:48.625Z",
                  "duration": 51,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:10:48.676Z",
                  "duration": 1063,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:10:49.739Z",
              "duration": 29,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:10:49.768Z",
              "duration": 129,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:10:49.892Z",
                  "duration": 4,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-b27e60e291baa2766110fa88f6b576fd09d005f9",
      "title": "should show locked user error",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 1353,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1353,
          "startTime": "2021-11-03T02:10:49.735Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:10:49.735Z",
              "duration": 1117,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:10:49.738Z",
                  "duration": 43,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:10:49.781Z",
                  "duration": 1071,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-11-03T02:10:50.853Z",
              "duration": 58,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:10:50.912Z",
              "duration": 29,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:10:50.942Z",
              "duration": 48,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-11-03T02:10:50.990Z",
              "duration": 8,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:10:50.999Z",
              "duration": 6,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:10:51.005Z",
              "duration": 82,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:10:51.082Z",
                  "duration": 5,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-165c1b436a7f47ac5fa7c09c90f01541b52ae81f",
      "title": "should show username is required error",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 1371,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1371,
          "startTime": "2021-11-03T02:10:49.899Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:10:49.899Z",
              "duration": 1061,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:10:49.904Z",
                  "duration": 55,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:10:49.959Z",
                  "duration": 1001,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-11-03T02:10:50.961Z",
              "duration": 41,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:10:51.003Z",
              "duration": 50,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:10:51.053Z",
              "duration": 69,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-11-03T02:10:51.123Z",
              "duration": 9,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:10:51.133Z",
              "duration": 20,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:10:51.154Z",
              "duration": 116,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:10:51.262Z",
                  "duration": 8,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-92bd631756721d575633888b13e68f7d24715ed2",
      "title": "should show username and password doesn't match",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 1399,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1399,
          "startTime": "2021-11-03T02:10:51.088Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:10:51.088Z",
              "duration": 1144,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:10:51.093Z",
                  "duration": 62,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:10:51.155Z",
                  "duration": 1077,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-11-03T02:10:52.233Z",
              "duration": 39,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:10:52.272Z",
              "duration": 30,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:10:52.302Z",
              "duration": 51,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-11-03T02:10:52.353Z",
              "duration": 9,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:10:52.363Z",
              "duration": 8,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:10:52.371Z",
              "duration": 116,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:10:52.473Z",
                  "duration": 13,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-a821bd2e7f071e153a367200b5602cdc39f953ab",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2093,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2093,
          "startTime": "2021-11-03T02:10:51.271Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:10:51.271Z",
              "duration": 1076,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:10:51.276Z",
                  "duration": 49,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:10:51.326Z",
                  "duration": 1021,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-11-03T02:10:52.347Z",
              "duration": 59,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:10:52.406Z",
              "duration": 51,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:10:52.458Z",
              "duration": 163,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-11-03T02:10:52.621Z",
              "duration": 69,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:10:52.690Z",
              "duration": 674,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:10:53.356Z",
                  "duration": 7,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-64ccd2abeb66bd09488581d21ba08ee6e66bb9ff",
      "title": "should be at the login url",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1602,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1602,
          "startTime": "2021-11-03T02:12:03.988Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:12:03.988Z",
              "duration": 1503,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:12:04.030Z",
                  "duration": 352,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:12:04.383Z",
                  "duration": 1108,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-11-03T02:12:05.492Z",
              "duration": 34,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:12:05.526Z",
              "duration": 64,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:12:05.578Z",
                  "duration": 11,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-e8f2af6a57b040b5c2ed8dbd17619e49f1874686",
      "title": "should show accepted users",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1697,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1697,
          "startTime": "2021-11-03T02:12:05.590Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:12:05.590Z",
              "duration": 1561,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:12:05.611Z",
                  "duration": 324,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:12:05.935Z",
                  "duration": 1216,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-11-03T02:12:07.152Z",
              "duration": 36,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-11-03T02:12:07.189Z",
              "duration": 0,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:12:07.189Z",
              "duration": 98,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:12:07.275Z",
                  "duration": 12,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-6d79ee52f5e52d37b2bba06c96f0c3f60050387e",
      "title": "should show application password ",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1526,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1526,
          "startTime": "2021-11-03T02:12:06.737Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:12:06.737Z",
              "duration": 1424,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:12:06.751Z",
                  "duration": 237,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:12:06.989Z",
                  "duration": 1172,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:12:08.162Z",
              "duration": 36,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:12:08.199Z",
              "duration": 64,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:12:08.255Z",
                  "duration": 8,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-87b33f996b98dd8f69efc7fbd60970a5044162d7",
      "title": "should show locked user error",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 1837,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1837,
          "startTime": "2021-11-03T02:12:07.288Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:12:07.288Z",
              "duration": 1404,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:12:07.305Z",
                  "duration": 282,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:12:07.587Z",
                  "duration": 1105,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-11-03T02:12:08.692Z",
              "duration": 153,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:12:08.845Z",
              "duration": 75,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:12:08.920Z",
              "duration": 82,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-11-03T02:12:09.002Z",
              "duration": 19,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:12:09.022Z",
              "duration": 23,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:12:09.046Z",
              "duration": 79,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:12:09.107Z",
                  "duration": 17,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-7d8442de6d8e0d0a6d6b8066409f6b3df9674c5d",
      "title": "should show username is required error",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 1668,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1668,
          "startTime": "2021-11-03T02:12:08.264Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:12:08.264Z",
              "duration": 1333,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:12:08.279Z",
                  "duration": 207,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:12:08.487Z",
                  "duration": 1110,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-11-03T02:12:09.598Z",
              "duration": 41,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:12:09.639Z",
              "duration": 99,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:12:09.738Z",
              "duration": 81,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-11-03T02:12:09.820Z",
              "duration": 17,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:12:09.837Z",
              "duration": 23,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:12:09.860Z",
              "duration": 72,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:12:09.922Z",
                  "duration": 9,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-1026593a957da30075efc811c273142269eba20c",
      "title": "should show username and password doesn't match",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 1663,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1663,
          "startTime": "2021-11-03T02:12:09.125Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:12:09.126Z",
              "duration": 1279,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:12:09.148Z",
                  "duration": 211,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:12:09.359Z",
                  "duration": 1046,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-11-03T02:12:10.406Z",
              "duration": 85,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:12:10.491Z",
              "duration": 96,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:12:10.587Z",
              "duration": 80,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-11-03T02:12:10.668Z",
              "duration": 17,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:12:10.685Z",
              "duration": 24,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:12:10.709Z",
              "duration": 80,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:12:10.780Z",
                  "duration": 9,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-f214f86175adfcf14e0c7cbd762502df0f38c2bd",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2236,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2236,
          "startTime": "2021-11-03T02:12:09.936Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:12:09.936Z",
              "duration": 1304,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:12:09.954Z",
                  "duration": 191,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:12:10.145Z",
                  "duration": 1094,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-11-03T02:12:11.240Z",
              "duration": 161,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:12:11.401Z",
              "duration": 138,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:12:11.540Z",
              "duration": 224,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-11-03T02:12:11.764Z",
              "duration": 101,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:12:11.865Z",
              "duration": 307,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:12:12.163Z",
                  "duration": 8,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-8d02882f9444a7d58c923750a3a161f4b3231528",
      "title": "should be at the login url",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1409,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1409,
          "startTime": "2021-11-03T02:13:17.763Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:13:17.763Z",
              "duration": 1335,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:13:17.783Z",
                  "duration": 253,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:13:18.036Z",
                  "duration": 1062,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-11-03T02:13:19.099Z",
              "duration": 26,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:13:19.125Z",
              "duration": 47,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:13:19.169Z",
                  "duration": 3,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-1db7d1ba52f9caace3a98e4ddcadd4ad67fba2e5",
      "title": "should show accepted users",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1280,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1280,
          "startTime": "2021-11-03T02:13:19.173Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:13:19.173Z",
              "duration": 1193,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:13:19.182Z",
                  "duration": 142,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:13:19.325Z",
                  "duration": 1041,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-11-03T02:13:20.367Z",
              "duration": 32,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-11-03T02:13:20.401Z",
              "duration": 0,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:13:20.401Z",
              "duration": 52,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:13:20.451Z",
                  "duration": 2,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-c56eb469bcc3a498408fb606e977c6fb27bf76ee",
      "title": "should show application password ",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1326,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1326,
          "startTime": "2021-11-03T02:13:19.921Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:13:19.921Z",
              "duration": 1219,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:13:19.933Z",
                  "duration": 144,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:13:20.077Z",
                  "duration": 1063,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:13:21.141Z",
              "duration": 60,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:13:21.201Z",
              "duration": 46,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:13:21.245Z",
                  "duration": 2,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-31ae6a3ba511899157690ffb0133d6273d3435c0",
      "title": "should show locked user error",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 1661,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1661,
          "startTime": "2021-11-03T02:13:20.454Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:13:20.454Z",
              "duration": 1210,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:13:20.477Z",
                  "duration": 197,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:13:20.675Z",
                  "duration": 989,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-11-03T02:13:21.665Z",
              "duration": 167,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:13:21.833Z",
              "duration": 103,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:13:21.936Z",
              "duration": 64,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-11-03T02:13:22.000Z",
              "duration": 38,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:13:22.039Z",
              "duration": 18,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:13:22.057Z",
              "duration": 58,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:13:22.102Z",
                  "duration": 13,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-68ed1c7975f8e9628d87cdd0b45503d97dcf6c5c",
      "title": "should show username is required error",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 1720,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1720,
          "startTime": "2021-11-03T02:13:21.248Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:13:21.248Z",
              "duration": 1337,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:13:21.257Z",
                  "duration": 146,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:13:21.403Z",
                  "duration": 1182,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-11-03T02:13:22.586Z",
              "duration": 33,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:13:22.619Z",
              "duration": 196,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:13:22.816Z",
              "duration": 78,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-11-03T02:13:22.895Z",
              "duration": 14,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:13:22.910Z",
              "duration": 9,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:13:22.919Z",
              "duration": 49,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:13:22.963Z",
                  "duration": 4,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-25d3fe9f6a8f27def8257f5e7ce7afdb4982e603",
      "title": "should show username and password doesn't match",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 1567,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1567,
          "startTime": "2021-11-03T02:13:22.116Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:13:22.116Z",
              "duration": 1218,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:13:22.133Z",
                  "duration": 138,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:13:22.272Z",
                  "duration": 1062,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-11-03T02:13:23.335Z",
              "duration": 106,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:13:23.442Z",
              "duration": 94,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:13:23.536Z",
              "duration": 66,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-11-03T02:13:23.602Z",
              "duration": 16,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:13:23.618Z",
              "duration": 17,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:13:23.635Z",
              "duration": 48,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:13:23.680Z",
                  "duration": 2,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-a94233a7b41c4d8fec1b2944b45d03a211ba00bf",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2106,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2106,
          "startTime": "2021-11-03T02:13:22.970Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:13:22.970Z",
              "duration": 1352,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:13:22.980Z",
                  "duration": 140,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:13:23.120Z",
                  "duration": 1201,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-11-03T02:13:24.322Z",
              "duration": 196,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:13:24.519Z",
              "duration": 76,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:13:24.596Z",
              "duration": 91,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-11-03T02:13:24.687Z",
              "duration": 204,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:13:24.892Z",
              "duration": 184,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:13:25.069Z",
                  "duration": 1,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-29327056d262cf56f1c9b5467f1ffb2d07166160",
      "title": "should be at the login url",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1550,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1550,
          "startTime": "2021-11-03T02:14:27.412Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:14:27.412Z",
              "duration": 1443,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:14:27.442Z",
                  "duration": 211,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:14:27.654Z",
                  "duration": 1201,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-11-03T02:14:28.855Z",
              "duration": 31,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:14:28.886Z",
              "duration": 76,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:14:28.958Z",
                  "duration": 1,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-dc202057ecd485193475a8424604f8b8eb702beb",
      "title": "should show accepted users",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1459,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1459,
          "startTime": "2021-11-03T02:14:28.962Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:14:28.962Z",
              "duration": 1370,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:14:28.985Z",
                  "duration": 244,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:14:29.229Z",
                  "duration": 1103,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-11-03T02:14:30.332Z",
              "duration": 27,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-11-03T02:14:30.360Z",
              "duration": 0,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:14:30.360Z",
              "duration": 61,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:14:30.418Z",
                  "duration": 1,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-d5d4fd7b8d82da45e5ded9f66f3d138d429d2664",
      "title": "should show application password ",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1390,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1390,
          "startTime": "2021-11-03T02:14:29.917Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:14:29.917Z",
              "duration": 1278,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:14:29.932Z",
                  "duration": 155,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:14:30.088Z",
                  "duration": 1107,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:14:31.196Z",
              "duration": 44,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:14:31.240Z",
              "duration": 66,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:14:31.298Z",
                  "duration": 1,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-0a9c2d2af1f63992e08988ac35baf5f4635f0aba",
      "title": "should show locked user error",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 1727,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1727,
          "startTime": "2021-11-03T02:14:30.422Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:14:30.422Z",
              "duration": 1259,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:14:30.448Z",
                  "duration": 224,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:14:30.672Z",
                  "duration": 1009,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-11-03T02:14:31.682Z",
              "duration": 166,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:14:31.849Z",
              "duration": 105,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:14:31.954Z",
              "duration": 74,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-11-03T02:14:32.028Z",
              "duration": 27,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:14:32.055Z",
              "duration": 30,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:14:32.085Z",
              "duration": 64,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:14:32.145Z",
                  "duration": 1,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-906f64914a7dc55b501d00bd4c44b1bd0e2b6a0b",
      "title": "should show username is required error",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 1849,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1849,
          "startTime": "2021-11-03T02:14:31.307Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:14:31.307Z",
              "duration": 1404,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:14:31.316Z",
                  "duration": 159,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:14:31.476Z",
                  "duration": 1234,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-11-03T02:14:32.712Z",
              "duration": 31,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:14:32.743Z",
              "duration": 214,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:14:32.958Z",
              "duration": 72,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-11-03T02:14:33.030Z",
              "duration": 38,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:14:33.070Z",
              "duration": 17,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:14:33.088Z",
              "duration": 68,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:14:33.147Z",
                  "duration": 1,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-75c573a7e885e1bbca3a52f7323ed54b225fac7b",
      "title": "should show username and password doesn't match",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 1864,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1864,
          "startTime": "2021-11-03T02:14:32.150Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:14:32.150Z",
              "duration": 1390,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:14:32.169Z",
                  "duration": 232,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:14:32.401Z",
                  "duration": 1139,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-11-03T02:14:33.541Z",
              "duration": 131,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:14:33.672Z",
              "duration": 130,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:14:33.802Z",
              "duration": 68,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-11-03T02:14:33.870Z",
              "duration": 23,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:14:33.893Z",
              "duration": 14,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:14:33.907Z",
              "duration": 106,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:14:34.006Z",
                  "duration": 5,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-3fd94e617156417a9c557ee2732f66a2a01f6c63",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 1982,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1982,
          "startTime": "2021-11-03T02:14:33.156Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:14:33.157Z",
              "duration": 1292,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:14:33.164Z",
                  "duration": 161,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:14:33.325Z",
                  "duration": 1124,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-11-03T02:14:34.451Z",
              "duration": 204,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:14:34.656Z",
              "duration": 142,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:14:34.798Z",
              "duration": 127,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-11-03T02:14:34.926Z",
              "duration": 134,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:14:35.060Z",
              "duration": 77,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:14:35.135Z",
                  "duration": 1,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-7df21eebd96905f145a8b09f44facd986f3830d3",
      "title": "should be at the login url",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1241,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1241,
          "startTime": "2021-11-03T02:15:34.083Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:15:34.083Z",
              "duration": 934,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:15:34.087Z",
                  "duration": 28,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:15:34.115Z",
                  "duration": 902,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-11-03T02:15:35.017Z",
              "duration": 24,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:15:35.041Z",
              "duration": 283,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:15:35.316Z",
                  "duration": 8,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-068d8b68e56284ab73c2dc73dde83a3acefdfd1b",
      "title": "should show accepted users",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1309,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1309,
          "startTime": "2021-11-03T02:15:34.901Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:15:34.901Z",
              "duration": 1073,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:15:34.910Z",
                  "duration": 31,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:15:34.942Z",
                  "duration": 1032,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-11-03T02:15:35.974Z",
              "duration": 17,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-11-03T02:15:35.992Z",
              "duration": 0,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:15:35.992Z",
              "duration": 218,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:15:36.204Z",
                  "duration": 5,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-6b13251d015ab5ef1dcaf8641fb5eb5723c46f74",
      "title": "should show application password ",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1276,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1276,
          "startTime": "2021-11-03T02:15:35.325Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:15:35.325Z",
              "duration": 1002,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:15:35.329Z",
                  "duration": 57,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:15:35.387Z",
                  "duration": 940,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:15:36.328Z",
              "duration": 23,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:15:36.351Z",
              "duration": 250,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:15:36.598Z",
                  "duration": 3,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-07b3e55e3cb192070799c55d9681cde48078bb8a",
      "title": "should show locked user error",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 1553,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1553,
          "startTime": "2021-11-03T02:15:36.211Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:15:36.211Z",
              "duration": 1145,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:15:36.214Z",
                  "duration": 34,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:15:36.248Z",
                  "duration": 1108,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-11-03T02:15:37.357Z",
              "duration": 64,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:15:37.421Z",
              "duration": 38,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:15:37.460Z",
              "duration": 52,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-11-03T02:15:37.512Z",
              "duration": 6,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:15:37.519Z",
              "duration": 8,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:15:37.527Z",
              "duration": 237,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:15:37.756Z",
                  "duration": 7,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-10982357e305bfe81eecf5a3263abf442058a788",
      "title": "should show username is required error",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 1542,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1542,
          "startTime": "2021-11-03T02:15:36.604Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:15:36.604Z",
              "duration": 1030,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:15:36.608Z",
                  "duration": 51,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:15:36.660Z",
                  "duration": 973,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-11-03T02:15:37.634Z",
              "duration": 25,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:15:37.660Z",
              "duration": 55,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:15:37.716Z",
              "duration": 62,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-11-03T02:15:37.778Z",
              "duration": 14,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:15:37.793Z",
              "duration": 11,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:15:37.804Z",
              "duration": 342,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:15:38.127Z",
                  "duration": 18,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-842cc783eaac7a254230d2e1d6f2b0b6fde50f7c",
      "title": "should show username and password doesn't match",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 1535,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1535,
          "startTime": "2021-11-03T02:15:37.764Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:15:37.764Z",
              "duration": 1131,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:15:37.768Z",
                  "duration": 43,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:15:37.811Z",
                  "duration": 1084,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-11-03T02:15:38.895Z",
              "duration": 45,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:15:38.940Z",
              "duration": 37,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:15:38.977Z",
              "duration": 49,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-11-03T02:15:39.026Z",
              "duration": 6,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-11-03T02:15:39.032Z",
              "duration": 6,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:15:39.038Z",
              "duration": 261,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:15:39.282Z",
                  "duration": 17,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-d95a7b070a52d81bd1fbd367c1a74a79b9b59643",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2025,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2025,
          "startTime": "2021-11-03T02:15:38.146Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-11-03T02:15:38.147Z",
              "duration": 1032,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-11-03T02:15:38.151Z",
                  "duration": 45,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-11-03T02:15:38.196Z",
                  "duration": 983,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-11-03T02:15:39.180Z",
              "duration": 76,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-11-03T02:15:39.257Z",
              "duration": 69,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-11-03T02:15:39.326Z",
              "duration": 197,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-11-03T02:15:39.524Z",
              "duration": 37,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-11-03T02:15:39.561Z",
              "duration": 610,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-11-03T02:15:40.158Z",
                  "duration": 9,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    }
  ]
}