{
  "fileId": "828880cd000e86f5272d4d70d617874cbf229e69",
  "fileName": "login.spec.js",
  "tests": [
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-ef22888abdd50efb3973a72a8c97e417cef37057",
      "title": "should be at the login url",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1281,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1281,
          "startTime": "2021-10-23T02:19:02.195Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:19:02.195Z",
              "duration": 1119,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:19:02.199Z",
                  "duration": 38,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:19:02.238Z",
                  "duration": 1076,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-23T02:19:03.315Z",
              "duration": 43,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:19:03.358Z",
              "duration": 118,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:19:03.460Z",
                  "duration": 15,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-405e2bbb49e635acc9db6b60d8b2b005c1f10ab2",
      "title": "should show accepted users",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1427,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1427,
          "startTime": "2021-10-23T02:19:03.430Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:19:03.430Z",
              "duration": 1277,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:19:03.436Z",
                  "duration": 83,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:19:03.520Z",
                  "duration": 1187,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-10-23T02:19:04.708Z",
              "duration": 22,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-10-23T02:19:04.731Z",
              "duration": 0,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:19:04.731Z",
              "duration": 125,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:19:04.843Z",
                  "duration": 12,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-d8dab2e7caad71d6fe1a9470e29b7a77e0e8ffaa",
      "title": "should show application password ",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1443,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1443,
          "startTime": "2021-10-23T02:19:03.476Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:19:03.477Z",
              "duration": 1277,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:19:03.482Z",
                  "duration": 61,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:19:03.543Z",
                  "duration": 1211,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:19:04.755Z",
              "duration": 28,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:19:04.783Z",
              "duration": 136,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:19:04.896Z",
                  "duration": 23,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-8f7089443c527c6a0de17e8b399c420dfb5b482e",
      "title": "should show locked user error",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 1679,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1679,
          "startTime": "2021-10-23T02:19:04.856Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:19:04.856Z",
              "duration": 1275,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:19:04.861Z",
                  "duration": 51,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:19:04.912Z",
                  "duration": 1219,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-10-23T02:19:06.132Z",
              "duration": 98,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:19:06.231Z",
              "duration": 63,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:19:06.295Z",
              "duration": 76,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-23T02:19:06.372Z",
              "duration": 12,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:19:06.384Z",
              "duration": 15,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:19:06.399Z",
              "duration": 136,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:19:06.513Z",
                  "duration": 22,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-215a1e9cb271011fd3cc91896b3f5fdaa8ff218c",
      "title": "should show username is required error",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 1613,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1613,
          "startTime": "2021-10-23T02:19:04.920Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:19:04.920Z",
              "duration": 1275,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:19:04.926Z",
                  "duration": 78,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:19:05.005Z",
                  "duration": 1190,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-10-23T02:19:06.195Z",
              "duration": 33,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:19:06.228Z",
              "duration": 79,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:19:06.307Z",
              "duration": 72,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-23T02:19:06.379Z",
              "duration": 12,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:19:06.391Z",
              "duration": 15,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:19:06.406Z",
              "duration": 127,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:19:06.514Z",
                  "duration": 19,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-fb46c22e2b845ed63d73c8f8d7035fcb7e2e55e5",
      "title": "should show username and password doesn't match",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 1647,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1647,
          "startTime": "2021-10-23T02:19:06.534Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:19:06.534Z",
              "duration": 1257,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:19:06.540Z",
                  "duration": 54,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:19:06.594Z",
                  "duration": 1197,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-10-23T02:19:07.792Z",
              "duration": 69,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:19:07.862Z",
              "duration": 76,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:19:07.939Z",
              "duration": 57,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-23T02:19:07.996Z",
              "duration": 12,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:19:08.008Z",
              "duration": 14,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:19:08.022Z",
              "duration": 159,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:19:08.159Z",
                  "duration": 22,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-f2908767cc70b5dc762a4ca12728e0698d20641c",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "chromium-hd",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2707,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2707,
          "startTime": "2021-10-23T02:19:06.540Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:19:06.540Z",
              "duration": 1266,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:19:06.555Z",
                  "duration": 61,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:19:06.616Z",
                  "duration": 1189,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-10-23T02:19:07.806Z",
              "duration": 136,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:19:07.943Z",
              "duration": 73,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:19:08.017Z",
              "duration": 219,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-23T02:19:08.237Z",
              "duration": 99,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:19:08.336Z",
              "duration": 910,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:19:09.239Z",
                  "duration": 7,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-d4a40aae9b95663fd5c88ef14677e8bb61c7bde8",
      "title": "should be at the login url",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1427,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1427,
          "startTime": "2021-10-23T02:20:17.966Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:20:17.967Z",
              "duration": 1131,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:20:17.974Z",
                  "duration": 57,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:20:18.040Z",
                  "duration": 1058,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-23T02:20:19.098Z",
              "duration": 31,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:20:19.129Z",
              "duration": 264,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:20:19.370Z",
                  "duration": 22,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-9c77119013e08e85d363416c4b1c050ec55e05a4",
      "title": "should show accepted users",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1412,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1412,
          "startTime": "2021-10-23T02:20:18.918Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:20:18.918Z",
              "duration": 1184,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:20:18.924Z",
                  "duration": 38,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:20:18.963Z",
                  "duration": 1139,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-10-23T02:20:20.103Z",
              "duration": 23,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-10-23T02:20:20.126Z",
              "duration": 1,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:20:20.127Z",
              "duration": 203,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:20:20.322Z",
                  "duration": 8,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-3bb7025f4b165cf17d7f9b94251db9877e9405fd",
      "title": "should show application password ",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1401,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1401,
          "startTime": "2021-10-23T02:20:19.394Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:20:19.394Z",
              "duration": 1109,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:20:19.401Z",
                  "duration": 56,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:20:19.457Z",
                  "duration": 1046,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:20:20.504Z",
              "duration": 34,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:20:20.539Z",
              "duration": 256,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:20:20.785Z",
                  "duration": 10,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-c1e4d61d3141458e677debff8bc4e0975afcb354",
      "title": "should show locked user error",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 1642,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1642,
          "startTime": "2021-10-23T02:20:20.331Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:20:20.331Z",
              "duration": 1186,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:20:20.338Z",
                  "duration": 40,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:20:20.379Z",
                  "duration": 1138,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-10-23T02:20:21.518Z",
              "duration": 101,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:20:21.619Z",
              "duration": 52,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:20:21.672Z",
              "duration": 69,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-23T02:20:21.742Z",
              "duration": 7,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:20:21.750Z",
              "duration": 9,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:20:21.759Z",
              "duration": 214,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:20:21.965Z",
                  "duration": 7,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-8aa37dfeed724766eae4fd8967d88f51ddd4b55f",
      "title": "should show username is required error",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 1702,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1702,
          "startTime": "2021-10-23T02:20:20.796Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:20:20.796Z",
              "duration": 1159,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:20:20.805Z",
                  "duration": 74,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:20:20.880Z",
                  "duration": 1075,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-10-23T02:20:21.956Z",
              "duration": 61,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:20:22.018Z",
              "duration": 153,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:20:22.172Z",
              "duration": 63,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-23T02:20:22.235Z",
              "duration": 13,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:20:22.250Z",
              "duration": 22,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:20:22.272Z",
              "duration": 226,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:20:22.477Z",
                  "duration": 20,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-fc970eda40ffc9fa4945cec93d585ced539b72a2",
      "title": "should show username and password doesn't match",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 1667,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1667,
          "startTime": "2021-10-23T02:20:21.973Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:20:21.973Z",
              "duration": 1289,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:20:21.977Z",
                  "duration": 52,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:20:22.030Z",
                  "duration": 1232,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-10-23T02:20:23.262Z",
              "duration": 58,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:20:23.321Z",
              "duration": 53,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:20:23.375Z",
              "duration": 60,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-23T02:20:23.436Z",
              "duration": 8,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:20:23.445Z",
              "duration": 7,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:20:23.452Z",
              "duration": 188,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:20:23.633Z",
                  "duration": 7,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-69650c3afd3e98144a8bc477b940ace583638e80",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "chromium-fhd",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2694,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2694,
          "startTime": "2021-10-23T02:20:22.498Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:20:22.499Z",
              "duration": 1126,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:20:22.509Z",
                  "duration": 53,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:20:22.563Z",
                  "duration": 1062,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-10-23T02:20:23.626Z",
              "duration": 211,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:20:23.838Z",
              "duration": 100,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:20:23.938Z",
              "duration": 181,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-23T02:20:24.120Z",
              "duration": 58,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:20:24.178Z",
              "duration": 1014,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:20:25.178Z",
                  "duration": 14,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-902990b201eaf9c0956f7da461961c8b52b50998",
      "title": "should be at the login url",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1222,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1222,
          "startTime": "2021-10-23T02:21:25.016Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:21:25.016Z",
              "duration": 1063,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:21:25.021Z",
                  "duration": 35,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:21:25.056Z",
                  "duration": 1022,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-23T02:21:26.079Z",
              "duration": 26,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:21:26.105Z",
              "duration": 133,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:21:26.228Z",
                  "duration": 9,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-5a40f2b07ad4bec508c011653ed48b8b08184d57",
      "title": "should show accepted users",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1390,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1390,
          "startTime": "2021-10-23T02:21:26.239Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:21:26.239Z",
              "duration": 1262,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:21:26.245Z",
                  "duration": 43,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:21:26.288Z",
                  "duration": 1213,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-10-23T02:21:27.502Z",
              "duration": 19,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-10-23T02:21:27.522Z",
              "duration": 0,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:21:27.522Z",
              "duration": 107,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:21:27.622Z",
                  "duration": 7,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-b5d0baca6632d947484cb0f06b435c86fffa9783",
      "title": "should show application password ",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1400,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1400,
          "startTime": "2021-10-23T02:21:26.412Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:21:26.413Z",
              "duration": 1181,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:21:26.417Z",
                  "duration": 50,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:21:26.467Z",
                  "duration": 1127,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:21:27.595Z",
              "duration": 23,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:21:27.618Z",
              "duration": 194,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:21:27.798Z",
                  "duration": 14,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-b27e60e291baa2766110fa88f6b576fd09d005f9",
      "title": "should show locked user error",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 1499,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1499,
          "startTime": "2021-10-23T02:21:27.631Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:21:27.631Z",
              "duration": 1142,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:21:27.636Z",
                  "duration": 35,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:21:27.671Z",
                  "duration": 1102,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-10-23T02:21:28.774Z",
              "duration": 74,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:21:28.849Z",
              "duration": 45,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:21:28.895Z",
              "duration": 69,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-23T02:21:28.964Z",
              "duration": 10,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:21:28.975Z",
              "duration": 27,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:21:29.002Z",
              "duration": 128,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:21:29.118Z",
                  "duration": 12,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-165c1b436a7f47ac5fa7c09c90f01541b52ae81f",
      "title": "should show username is required error",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 1467,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1467,
          "startTime": "2021-10-23T02:21:27.812Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:21:27.812Z",
              "duration": 1115,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:21:27.818Z",
                  "duration": 72,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:21:27.891Z",
                  "duration": 1036,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-10-23T02:21:28.928Z",
              "duration": 27,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:21:28.955Z",
              "duration": 73,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:21:29.029Z",
              "duration": 55,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-23T02:21:29.085Z",
              "duration": 10,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:21:29.095Z",
              "duration": 14,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:21:29.109Z",
              "duration": 170,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:21:29.245Z",
                  "duration": 34,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-92bd631756721d575633888b13e68f7d24715ed2",
      "title": "should show username and password doesn't match",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 1530,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1530,
          "startTime": "2021-10-23T02:21:29.131Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:21:29.131Z",
              "duration": 1210,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:21:29.143Z",
                  "duration": 46,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:21:29.189Z",
                  "duration": 1152,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-10-23T02:21:30.341Z",
              "duration": 52,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:21:30.394Z",
              "duration": 52,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:21:30.447Z",
              "duration": 59,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-23T02:21:30.506Z",
              "duration": 8,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:21:30.515Z",
              "duration": 13,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:21:30.528Z",
              "duration": 133,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:21:30.648Z",
                  "duration": 12,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-a821bd2e7f071e153a367200b5602cdc39f953ab",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "chrome-hd",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2476,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2476,
          "startTime": "2021-10-23T02:21:29.280Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:21:29.280Z",
              "duration": 1153,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:21:29.286Z",
                  "duration": 71,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:21:29.358Z",
                  "duration": 1074,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-10-23T02:21:30.433Z",
              "duration": 94,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:21:30.528Z",
              "duration": 58,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:21:30.587Z",
              "duration": 179,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-23T02:21:30.766Z",
              "duration": 114,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:21:30.880Z",
              "duration": 876,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:21:31.745Z",
                  "duration": 10,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-64ccd2abeb66bd09488581d21ba08ee6e66bb9ff",
      "title": "should be at the login url",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1814,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1814,
          "startTime": "2021-10-23T02:22:55.278Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:22:55.281Z",
              "duration": 1708,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:22:55.296Z",
                  "duration": 422,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:22:55.719Z",
                  "duration": 1270,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-23T02:22:56.989Z",
              "duration": 33,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:22:57.023Z",
              "duration": 69,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:22:57.080Z",
                  "duration": 12,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-e8f2af6a57b040b5c2ed8dbd17619e49f1874686",
      "title": "should show accepted users",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1863,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1863,
          "startTime": "2021-10-23T02:22:57.093Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:22:57.093Z",
              "duration": 1699,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:22:57.114Z",
                  "duration": 402,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:22:57.516Z",
                  "duration": 1276,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-10-23T02:22:58.793Z",
              "duration": 58,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-10-23T02:22:58.852Z",
              "duration": 0,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:22:58.852Z",
              "duration": 104,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:22:58.943Z",
                  "duration": 13,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-6d79ee52f5e52d37b2bba06c96f0c3f60050387e",
      "title": "should show application password ",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1671,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1671,
          "startTime": "2021-10-23T02:22:58.247Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:22:58.247Z",
              "duration": 1566,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:22:58.273Z",
                  "duration": 313,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:22:58.587Z",
                  "duration": 1226,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:22:59.814Z",
              "duration": 32,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:22:59.846Z",
              "duration": 72,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:22:59.909Z",
                  "duration": 9,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-87b33f996b98dd8f69efc7fbd60970a5044162d7",
      "title": "should show locked user error",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 2359,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2359,
          "startTime": "2021-10-23T02:22:58.956Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:22:58.957Z",
              "duration": 1625,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:22:58.983Z",
                  "duration": 415,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:22:59.399Z",
                  "duration": 1183,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-10-23T02:23:00.582Z",
              "duration": 284,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:23:00.867Z",
              "duration": 168,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:23:01.035Z",
              "duration": 159,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-23T02:23:01.195Z",
              "duration": 18,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:23:01.214Z",
              "duration": 30,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:23:01.244Z",
              "duration": 71,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:23:01.305Z",
                  "duration": 10,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-7d8442de6d8e0d0a6d6b8066409f6b3df9674c5d",
      "title": "should show username is required error",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 2156,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2156,
          "startTime": "2021-10-23T02:22:59.919Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:22:59.919Z",
              "duration": 1595,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:22:59.940Z",
                  "duration": 353,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:23:00.294Z",
                  "duration": 1220,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-10-23T02:23:01.515Z",
              "duration": 67,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:23:01.583Z",
              "duration": 257,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:23:01.840Z",
              "duration": 112,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-23T02:23:01.952Z",
              "duration": 29,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:23:01.983Z",
              "duration": 27,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:23:02.010Z",
              "duration": 65,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:23:02.066Z",
                  "duration": 9,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-1026593a957da30075efc811c273142269eba20c",
      "title": "should show username and password doesn't match",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 2299,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2299,
          "startTime": "2021-10-23T02:23:01.316Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:23:01.316Z",
              "duration": 1641,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:23:01.332Z",
                  "duration": 258,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:23:01.591Z",
                  "duration": 1366,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-10-23T02:23:02.958Z",
              "duration": 175,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:23:03.134Z",
              "duration": 148,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:23:03.283Z",
              "duration": 88,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-23T02:23:03.372Z",
              "duration": 20,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:23:03.394Z",
              "duration": 80,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:23:03.474Z",
              "duration": 142,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:23:03.592Z",
                  "duration": 23,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-f214f86175adfcf14e0c7cbd762502df0f38c2bd",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "firefox-hd",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 3014,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 3014,
          "startTime": "2021-10-23T02:23:02.076Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:23:02.076Z",
              "duration": 1509,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:23:02.101Z",
                  "duration": 311,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:23:02.413Z",
                  "duration": 1171,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-10-23T02:23:03.585Z",
              "duration": 194,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:23:03.779Z",
              "duration": 217,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:23:03.996Z",
              "duration": 321,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-23T02:23:04.318Z",
              "duration": 273,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:23:04.591Z",
              "duration": 498,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:23:05.049Z",
                  "duration": 40,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-8d02882f9444a7d58c923750a3a161f4b3231528",
      "title": "should be at the login url",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1647,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1647,
          "startTime": "2021-10-23T02:24:20.797Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:24:20.799Z",
              "duration": 1553,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:24:20.826Z",
                  "duration": 270,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:24:21.097Z",
                  "duration": 1255,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-23T02:24:22.353Z",
              "duration": 33,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:24:22.386Z",
              "duration": 58,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:24:22.441Z",
                  "duration": 2,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-1db7d1ba52f9caace3a98e4ddcadd4ad67fba2e5",
      "title": "should show accepted users",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1674,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1674,
          "startTime": "2021-10-23T02:24:22.445Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:24:22.445Z",
              "duration": 1565,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:24:22.459Z",
                  "duration": 178,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:24:22.637Z",
                  "duration": 1373,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-10-23T02:24:24.011Z",
              "duration": 33,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-10-23T02:24:24.044Z",
              "duration": 0,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:24:24.044Z",
              "duration": 74,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:24:24.108Z",
                  "duration": 10,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-c56eb469bcc3a498408fb606e977c6fb27bf76ee",
      "title": "should show application password ",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1488,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1488,
          "startTime": "2021-10-23T02:24:23.375Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:24:23.375Z",
              "duration": 1393,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:24:23.384Z",
                  "duration": 245,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:24:23.630Z",
                  "duration": 1138,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:24:24.769Z",
              "duration": 36,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:24:24.805Z",
              "duration": 58,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:24:24.860Z",
                  "duration": 3,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-31ae6a3ba511899157690ffb0133d6273d3435c0",
      "title": "should show locked user error",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 2093,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2093,
          "startTime": "2021-10-23T02:24:24.119Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:24:24.119Z",
              "duration": 1458,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:24:24.141Z",
                  "duration": 256,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:24:24.398Z",
                  "duration": 1179,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-10-23T02:24:25.579Z",
              "duration": 316,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:24:25.895Z",
              "duration": 124,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:24:26.020Z",
              "duration": 87,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-23T02:24:26.108Z",
              "duration": 29,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:24:26.138Z",
              "duration": 10,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:24:26.148Z",
              "duration": 64,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:24:26.202Z",
                  "duration": 9,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-68ed1c7975f8e9628d87cdd0b45503d97dcf6c5c",
      "title": "should show username is required error",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 2040,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2040,
          "startTime": "2021-10-23T02:24:24.864Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:24:24.864Z",
              "duration": 1422,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:24:24.892Z",
                  "duration": 213,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:24:25.106Z",
                  "duration": 1180,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-10-23T02:24:26.287Z",
              "duration": 62,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:24:26.350Z",
              "duration": 362,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:24:26.712Z",
              "duration": 85,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-23T02:24:26.798Z",
              "duration": 32,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:24:26.831Z",
              "duration": 18,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:24:26.849Z",
              "duration": 55,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:24:26.901Z",
                  "duration": 2,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-25d3fe9f6a8f27def8257f5e7ce7afdb4982e603",
      "title": "should show username and password doesn't match",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 2153,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2153,
          "startTime": "2021-10-23T02:24:26.212Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:24:26.213Z",
              "duration": 1632,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:24:26.221Z",
                  "duration": 228,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:24:26.450Z",
                  "duration": 1395,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-10-23T02:24:27.846Z",
              "duration": 187,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:24:28.034Z",
              "duration": 169,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:24:28.204Z",
              "duration": 69,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-23T02:24:28.274Z",
              "duration": 17,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:24:28.292Z",
              "duration": 16,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:24:28.308Z",
              "duration": 57,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:24:28.361Z",
                  "duration": 3,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-a94233a7b41c4d8fec1b2944b45d03a211ba00bf",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "webkit-hd",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2763,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2763,
          "startTime": "2021-10-23T02:24:26.904Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:24:26.905Z",
              "duration": 1509,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:24:26.953Z",
                  "duration": 246,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:24:27.199Z",
                  "duration": 1215,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-10-23T02:24:28.415Z",
              "duration": 394,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:24:28.810Z",
              "duration": 252,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:24:29.062Z",
              "duration": 167,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-23T02:24:29.229Z",
              "duration": 297,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:24:29.526Z",
              "duration": 141,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:24:29.664Z",
                  "duration": 3,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-29327056d262cf56f1c9b5467f1ffb2d07166160",
      "title": "should be at the login url",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1839,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1839,
          "startTime": "2021-10-23T02:25:41.608Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:25:41.608Z",
              "duration": 1692,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:25:41.634Z",
                  "duration": 301,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:25:41.936Z",
                  "duration": 1364,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-23T02:25:43.301Z",
              "duration": 41,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:25:43.342Z",
              "duration": 105,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:25:43.438Z",
                  "duration": 9,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-dc202057ecd485193475a8424604f8b8eb702beb",
      "title": "should show accepted users",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1703,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1703,
          "startTime": "2021-10-23T02:25:43.448Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:25:43.448Z",
              "duration": 1596,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:25:43.470Z",
                  "duration": 290,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:25:43.760Z",
                  "duration": 1284,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-10-23T02:25:45.044Z",
              "duration": 35,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-10-23T02:25:45.079Z",
              "duration": 1,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:25:45.080Z",
              "duration": 71,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:25:45.147Z",
                  "duration": 3,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-d5d4fd7b8d82da45e5ded9f66f3d138d429d2664",
      "title": "should show application password ",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1531,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1531,
          "startTime": "2021-10-23T02:25:44.420Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:25:44.420Z",
              "duration": 1416,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:25:44.439Z",
                  "duration": 276,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:25:44.715Z",
                  "duration": 1121,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:25:45.837Z",
              "duration": 35,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:25:45.872Z",
              "duration": 79,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:25:45.947Z",
                  "duration": 2,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-0a9c2d2af1f63992e08988ac35baf5f4635f0aba",
      "title": "should show locked user error",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 2148,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2148,
          "startTime": "2021-10-23T02:25:45.151Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:25:45.152Z",
              "duration": 1421,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:25:45.178Z",
                  "duration": 267,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:25:45.446Z",
                  "duration": 1127,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-10-23T02:25:46.574Z",
              "duration": 358,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:25:46.932Z",
              "duration": 175,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:25:47.108Z",
              "duration": 91,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-23T02:25:47.199Z",
              "duration": 20,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:25:47.221Z",
              "duration": 12,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:25:47.233Z",
              "duration": 65,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:25:47.295Z",
                  "duration": 3,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-906f64914a7dc55b501d00bd4c44b1bd0e2b6a0b",
      "title": "should show username is required error",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 2155,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2155,
          "startTime": "2021-10-23T02:25:45.952Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:25:45.952Z",
              "duration": 1491,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:25:45.976Z",
                  "duration": 273,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:25:46.250Z",
                  "duration": 1193,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-10-23T02:25:47.444Z",
              "duration": 59,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:25:47.504Z",
              "duration": 366,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:25:47.871Z",
              "duration": 103,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-23T02:25:47.974Z",
              "duration": 40,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:25:48.015Z",
              "duration": 19,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:25:48.034Z",
              "duration": 73,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:25:48.104Z",
                  "duration": 2,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-75c573a7e885e1bbca3a52f7323ed54b225fac7b",
      "title": "should show username and password doesn't match",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 2106,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2106,
          "startTime": "2021-10-23T02:25:47.299Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:25:47.299Z",
              "duration": 1541,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:25:47.312Z",
                  "duration": 210,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:25:47.522Z",
                  "duration": 1318,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-10-23T02:25:48.841Z",
              "duration": 153,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:25:48.995Z",
              "duration": 213,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:25:49.209Z",
              "duration": 89,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-23T02:25:49.299Z",
              "duration": 29,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:25:49.328Z",
              "duration": 11,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:25:49.340Z",
              "duration": 65,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:25:49.403Z",
                  "duration": 2,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-3fd94e617156417a9c557ee2732f66a2a01f6c63",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "iphone-8",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2497,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2497,
          "startTime": "2021-10-23T02:25:48.108Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:25:48.108Z",
              "duration": 1476,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:25:48.132Z",
                  "duration": 255,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:25:48.388Z",
                  "duration": 1195,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-10-23T02:25:49.584Z",
              "duration": 288,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:25:49.872Z",
              "duration": 188,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:25:50.060Z",
              "duration": 177,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-23T02:25:50.237Z",
              "duration": 264,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:25:50.501Z",
              "duration": 104,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:25:50.602Z",
                  "duration": 3,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-7df21eebd96905f145a8b09f44facd986f3830d3",
      "title": "should be at the login url",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 10,
        "column": 5
      },
      "duration": 1556,
      "outcome": "expected",
      "path": [
        "login.spec.js:10",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1556,
          "startTime": "2021-10-23T02:26:58.941Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:26:58.941Z",
              "duration": 1203,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:26:58.951Z",
                  "duration": 78,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:26:59.029Z",
                  "duration": 1114,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-23T02:27:00.144Z",
              "duration": 25,
              "snippet": "  10 |     test(\"should be at the login url\", async ({ baseURL, loginController }) => {\n  11 |         await expect(loginController.page).toHaveURL(`${baseURL}/`)\n     |                                            ^\n  12 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 11,
                "column": 44
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:27:00.169Z",
              "duration": 328,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:27:00.453Z",
                  "duration": 44,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-068d8b68e56284ab73c2dc73dde83a3acefdfd1b",
      "title": "should show accepted users",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 14,
        "column": 5
      },
      "duration": 1779,
      "outcome": "expected",
      "path": [
        "login.spec.js:14",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1779,
          "startTime": "2021-10-23T02:27:00.492Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:27:00.492Z",
              "duration": 1350,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:27:00.500Z",
                  "duration": 65,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:27:00.565Z",
                  "duration": 1275,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.innerText(data-test=section-usernames)",
              "startTime": "2021-10-23T02:27:01.843Z",
              "duration": 29,
              "snippet": "  125 |         let acceptedUsers = this.components.acceptedUsersText()\n  126 |         acceptedUsers = await acceptedUsers.innerText()\n      |                                             ^\n  127 |         return acceptedUsers.split(\"\\n\").filter(Boolean).slice(1)",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 126,
                "column": 45
              }
            },
            {
              "title": "expect.toEqual",
              "startTime": "2021-10-23T02:27:01.872Z",
              "duration": 1,
              "snippet": "  15 |         const acceptedUsers = await loginController.getAcceptedUsers()\n  16 |         expect(acceptedUsers).toEqual(loginController.acceptedUsers)\n     |                               ^\n  17 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 16,
                "column": 31
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:27:01.873Z",
              "duration": 398,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:27:02.241Z",
                  "duration": 29,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-6b13251d015ab5ef1dcaf8641fb5eb5723c46f74",
      "title": "should show application password ",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 19,
        "column": 5
      },
      "duration": 1586,
      "outcome": "expected",
      "path": [
        "login.spec.js:19",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1586,
          "startTime": "2021-10-23T02:27:00.498Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:27:00.498Z",
              "duration": 1283,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:27:00.514Z",
                  "duration": 71,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:27:00.586Z",
                  "duration": 1195,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:27:01.782Z",
              "duration": 24,
              "snippet": "  21 |         const passwordRegex = new RegExp(`.*${loginController.password}`, \"g\")\n  22 |         await expect(systemPassword).toHaveText(passwordRegex)\n     |                                      ^\n  23 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 22,
                "column": 38
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:27:01.806Z",
              "duration": 278,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:27:02.077Z",
                  "duration": 7,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-07b3e55e3cb192070799c55d9681cde48078bb8a",
      "title": "should show locked user error",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 25,
        "column": 5
      },
      "duration": 1854,
      "outcome": "expected",
      "path": [
        "login.spec.js:25",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1854,
          "startTime": "2021-10-23T02:27:02.085Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:27:02.085Z",
              "duration": 1264,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:27:02.095Z",
                  "duration": 46,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:27:02.142Z",
                  "duration": 1207,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, locked_out_user)",
              "startTime": "2021-10-23T02:27:03.350Z",
              "duration": 93,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:27:03.444Z",
              "duration": 74,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:27:03.519Z",
              "duration": 87,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-23T02:27:03.606Z",
              "duration": 14,
              "snippet": "  26 |         await loginController.loginWithLockedUser()\n  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 27,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:27:03.621Z",
              "duration": 13,
              "snippet": "  27 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  28 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_LOCKED)\n     |                                                                           ^\n  29 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 28,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:27:03.634Z",
              "duration": 305,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:27:03.930Z",
                  "duration": 9,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-10982357e305bfe81eecf5a3263abf442058a788",
      "title": "should show username is required error",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 31,
        "column": 5
      },
      "duration": 1764,
      "outcome": "expected",
      "path": [
        "login.spec.js:31",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1764,
          "startTime": "2021-10-23T02:27:02.271Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:27:02.272Z",
              "duration": 1197,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:27:02.279Z",
                  "duration": 83,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:27:02.363Z",
                  "duration": 1106,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username)",
              "startTime": "2021-10-23T02:27:03.469Z",
              "duration": 40,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:27:03.509Z",
              "duration": 87,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:27:03.597Z",
              "duration": 68,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-23T02:27:03.666Z",
              "duration": 24,
              "snippet": "  32 |         await loginController.loginWithoutUser()\n  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 33,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:27:03.694Z",
              "duration": 13,
              "snippet": "  33 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  34 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_USER)\n     |                                                                           ^\n  35 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 34,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:27:03.707Z",
              "duration": 328,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:27:04.014Z",
                  "duration": 21,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-842cc783eaac7a254230d2e1d6f2b0b6fde50f7c",
      "title": "should show username and password doesn't match",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 37,
        "column": 5
      },
      "duration": 1986,
      "outcome": "expected",
      "path": [
        "login.spec.js:37",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 1986,
          "startTime": "2021-10-23T02:27:03.940Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:27:03.940Z",
              "duration": 1370,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:27:03.948Z",
                  "duration": 109,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:27:04.058Z",
                  "duration": 1252,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, noname)",
              "startTime": "2021-10-23T02:27:05.310Z",
              "duration": 78,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:27:05.389Z",
              "duration": 79,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:27:05.468Z",
              "duration": 65,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "page.waitForSelector(data-test=error-text)",
              "startTime": "2021-10-23T02:27:05.533Z",
              "duration": 13,
              "snippet": "  38 |         await loginController.loginWithWrongCredential()\n  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n     |                                    ^\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 39,
                "column": 36
              }
            },
            {
              "title": "expect.toHaveText",
              "startTime": "2021-10-23T02:27:05.548Z",
              "duration": 15,
              "snippet": "  39 |         await loginController.page.waitForSelector(loginController.selectors.errorText)\n  40 |         await expect(await loginController.components.errorMessageText()).toHaveText(ERRORS.LOGIN_CREDENTIALS)\n     |                                                                           ^\n  41 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 40,
                "column": 75
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:27:05.563Z",
              "duration": 363,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:27:05.916Z",
                  "duration": 9,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    },
    {
      "testId": "828880cd000e86f5272d4d70d617874cbf229e69-d95a7b070a52d81bd1fbd367c1a74a79b9b59643",
      "title": "should navigate to inventory page after successful login @smoke",
      "projectName": "pixel-4",
      "location": {
        "file": "login.spec.js",
        "line": 43,
        "column": 5
      },
      "duration": 2738,
      "outcome": "expected",
      "path": [
        "login.spec.js:43",
        "Saucedemo LoginPage: @login"
      ],
      "results": [
        {
          "duration": 2738,
          "startTime": "2021-10-23T02:27:04.036Z",
          "retry": 0,
          "steps": [
            {
              "title": "Before Hooks",
              "startTime": "2021-10-23T02:27:04.036Z",
              "duration": 1299,
              "steps": [
                {
                  "title": "browserContext.newPage",
                  "startTime": "2021-10-23T02:27:04.041Z",
                  "duration": 101,
                  "steps": []
                },
                {
                  "title": "page.goto",
                  "startTime": "2021-10-23T02:27:04.143Z",
                  "duration": 1191,
                  "snippet": "   41 |     async navigate() {\n   42 |         await this.page.goto(`${PAGES.LOGIN}`, { waitUntil: \"networkidle\" })\n      |                         ^\n   43 |     }",
                  "steps": [],
                  "location": {
                    "file": "../saucedemo/pages/login/controller.js",
                    "line": 42,
                    "column": 25
                  }
                }
              ]
            },
            {
              "title": "locator.type(data-test=input-username, standard_user)",
              "startTime": "2021-10-23T02:27:05.335Z",
              "duration": 122,
              "snippet": "   60 |         const usernameSelector = this.components.usernameInput()\n   61 |         await usernameSelector.type(username)\n      |                                ^\n   62 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 61,
                "column": 32
              }
            },
            {
              "title": "locator.type(data-test=input-password, secret_sauce)",
              "startTime": "2021-10-23T02:27:05.457Z",
              "duration": 93,
              "snippet": "   68 |         const passwordSelector = this.components.passwordInput()\n   69 |         await passwordSelector.type(password)\n      |                                ^\n   70 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 69,
                "column": 32
              }
            },
            {
              "title": "locator.click(data-test=button-login)",
              "startTime": "2021-10-23T02:27:05.550Z",
              "duration": 188,
              "snippet": "   76 |         const loginSelector = this.components.loginButton()\n   77 |         await loginSelector.click()\n      |                             ^\n   78 |     }",
              "steps": [],
              "location": {
                "file": "../saucedemo/pages/login/controller.js",
                "line": 77,
                "column": 29
              }
            },
            {
              "title": "expect.toHaveURL",
              "startTime": "2021-10-23T02:27:05.739Z",
              "duration": 41,
              "snippet": "  48 |         await loginController.loginWithStandardUser()\n  49 |         await expect(inventoryController.page).toHaveURL(`${baseURL}${PAGES.INVENTORY}`)\n     |                                                ^\n  50 |     })",
              "steps": [],
              "location": {
                "file": "login.spec.js",
                "line": 49,
                "column": 48
              }
            },
            {
              "title": "After Hooks",
              "startTime": "2021-10-23T02:27:05.780Z",
              "duration": 993,
              "steps": [
                {
                  "title": "browserContext.close",
                  "startTime": "2021-10-23T02:27:06.756Z",
                  "duration": 16,
                  "steps": []
                }
              ]
            }
          ],
          "error": "",
          "status": "passed",
          "attachments": []
        }
      ],
      "ok": true
    }
  ]
}